schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type AdditionalParams
  @join__type(graph: CONTESTS)
  @join__type(graph: SUBMIT)
{
  anonSubs: Boolean! @join__field(graph: CONTESTS) @join__field(graph: SUBMIT, external: true)
  visibleVotes: Boolean! @join__field(graph: CONTESTS) @join__field(graph: SUBMIT, external: true)
  selfVote: Boolean! @join__field(graph: CONTESTS)
  subLimit: Int! @join__field(graph: CONTESTS)
}

input AdditionalParamsInput
  @join__type(graph: CONTESTS)
{
  anonSubs: Boolean!
  visibleVotes: Boolean!
  selfVote: Boolean!
  subLimit: Int!
}

type Admin
  @join__type(graph: CONTESTS, key: "id")
  @join__type(graph: SPACES, key: "id")
{
  id: ID! @join__field(graph: CONTESTS, external: true) @join__field(graph: SPACES)
  address: String! @join__field(graph: CONTESTS, external: true) @join__field(graph: SPACES)
  spaceId: ID! @join__field(graph: SPACES)
}

type ArcadeVotingStrategy
  @join__type(graph: CONTESTS)
{
  token: Token!
  votingPower: String!
}

type ArcadeVotingStrategyOption
  @join__type(graph: CONTESTS)
{
  strategyType: VotingStrategyTypeEnum!
  arcadeVotingStrategy: ArcadeVotingStrategy!
}

input CastVotePayload
  @join__type(graph: VOTE)
{
  submissionId: ID!
  votes: Decimal!
}

type CastVoteResponse
  @join__type(graph: VOTE)
{
  success: Boolean!
  userVotingParams: UserVotingParams!
}

type Contest
  @join__type(graph: CONTESTS, key: "id")
  @join__type(graph: SUBMIT, key: "id", extension: true)
{
  id: ID!
  spaceId: ID! @join__field(graph: CONTESTS)
  space: SpaceStub! @join__field(graph: CONTESTS)
  created: String! @join__field(graph: CONTESTS)
  metadata: Metadata! @join__field(graph: CONTESTS)
  deadlines: Deadlines! @join__field(graph: CONTESTS) @join__field(graph: SUBMIT, external: true)
  promptUrl: IpfsUrl! @join__field(graph: CONTESTS)
  additionalParams: AdditionalParams! @join__field(graph: CONTESTS) @join__field(graph: SUBMIT, external: true)
  tweetId: String @join__field(graph: CONTESTS)
  submitterRewards: [SubmitterReward!]! @join__field(graph: CONTESTS)
  voterRewards: [VoterReward!]! @join__field(graph: CONTESTS)
  submitterRestrictions: [SubmitterRestriction!]! @join__field(graph: CONTESTS)
  votingPolicy: [VotingStrategy!]! @join__field(graph: CONTESTS)
  submissions: [Submission!]! @join__field(graph: SUBMIT, requires: "deadlines {startTime, voteTime, endTime, snapshot}, additionalParams {anonSubs, visibleVotes}")
  gnosisResults: String @join__field(graph: SUBMIT, requires: "deadlines {endTime}")
}

enum ContestCategoryEnum
  @join__type(graph: CONTESTS)
{
  art @join__enumValue(graph: CONTESTS)
  music @join__enumValue(graph: CONTESTS)
  writing @join__enumValue(graph: CONTESTS)
  video @join__enumValue(graph: CONTESTS)
  photography @join__enumValue(graph: CONTESTS)
  design @join__enumValue(graph: CONTESTS)
  memes @join__enumValue(graph: CONTESTS)
  other @join__enumValue(graph: CONTESTS)
}

type ContestMutationResponse
  @join__type(graph: CONTESTS)
{
  success: Boolean!
  contestId: ID
}

type ContestTweetResponse
  @join__type(graph: CONTESTS)
{
  success: Boolean!
  errors: String
}

enum ContestTypeEnum
  @join__type(graph: CONTESTS)
{
  standard @join__enumValue(graph: CONTESTS)
  twitter @join__enumValue(graph: CONTESTS)
}

input CreateContestData
  @join__type(graph: CONTESTS)
{
  metadata: MetadataInput!
  deadlines: DeadlinesInput!
  prompt: PromptInput!
  submitterRewards: SubmitterRewardsInput!
  voterRewards: VoterRewardsInput!
  submitterRestrictions: [SubmitterRestrictionInput!]!
  votingPolicy: [VotingPolicyInput!]!
  additionalParams: AdditionalParamsInput!
}

type createSubmissionResponse
  @join__type(graph: SUBMIT)
{
  success: Boolean!
  userSubmissionParams: UserSubmissionParams!
}

type Deadlines
  @join__type(graph: CONTESTS)
  @join__type(graph: SUBMIT)
{
  startTime: ISODateString! @join__field(graph: CONTESTS) @join__field(graph: SUBMIT, external: true)
  voteTime: ISODateString! @join__field(graph: CONTESTS) @join__field(graph: SUBMIT, external: true)
  endTime: ISODateString! @join__field(graph: CONTESTS) @join__field(graph: SUBMIT, external: true)
  snapshot: ISODateString! @join__field(graph: CONTESTS) @join__field(graph: SUBMIT, external: true)
}

input DeadlinesInput
  @join__type(graph: CONTESTS)
{
  snapshot: ISODateString!
  startTime: ISODateString!
  voteTime: ISODateString!
  endTime: ISODateString!
}

scalar Decimal
  @join__type(graph: CONTESTS)
  @join__type(graph: SUBMIT)
  @join__type(graph: VOTE)

scalar EditorData
  @join__type(graph: CONTESTS)
  @join__type(graph: SUBMIT)

input ERCTokenInput
  @join__type(graph: CONTESTS)
{
  type: ERCTokenTypeEnum!
  address: String!
  symbol: String!
  decimals: Int!
  tokenId: Int
}

enum ERCTokenTypeEnum
  @join__type(graph: CONTESTS)
{
  ERC20 @join__enumValue(graph: CONTESTS)
  ERC721 @join__enumValue(graph: CONTESTS)
  ERC1155 @join__enumValue(graph: CONTESTS)
}

input FungiblePayoutInput
  @join__type(graph: CONTESTS)
{
  amount: String!
}

type FungibleReward
  @join__type(graph: CONTESTS)
{
  token: Token!
  amount: String!
}

scalar IpfsUrl
  @join__type(graph: CONTESTS)
  @join__type(graph: SPACES)
  @join__type(graph: VOTE)

scalar ISODateString
  @join__type(graph: CONTESTS)
  @join__type(graph: SUBMIT)

scalar join__FieldSet

enum join__Graph {
  CONTESTS @join__graph(name: "contests", url: "http://contests:8080")
  SPACES @join__graph(name: "spaces", url: "http://spaces:8080")
  SUBMIT @join__graph(name: "submit", url: "http://submit:8080")
  USER @join__graph(name: "user", url: "http://user:8080")
  VOTE @join__graph(name: "vote", url: "http://vote:8080")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Metadata
  @join__type(graph: CONTESTS)
{
  type: ContestTypeEnum!
  category: ContestCategoryEnum!
}

input MetadataInput
  @join__type(graph: CONTESTS)
{
  type: ContestTypeEnum!
  category: ContestCategoryEnum!
}

type Mutation
  @join__type(graph: CONTESTS)
  @join__type(graph: SPACES)
  @join__type(graph: SUBMIT)
  @join__type(graph: VOTE)
{
  createContest(spaceId: ID!, contestData: CreateContestData!): ContestMutationResponse! @join__field(graph: CONTESTS)
  createContestTweet(contestId: ID!, spaceId: ID!, tweetThread: [ThreadItemInput!]!): ContestTweetResponse! @join__field(graph: CONTESTS)
  createSpace(spaceData: SpaceBuilderInput!): SpaceMutationResponse! @join__field(graph: SPACES)
  editSpace(spaceId: ID!, spaceData: SpaceBuilderInput!): SpaceMutationResponse! @join__field(graph: SPACES)
  createSubmission(contestId: ID!, submission: SubmissionPayload!): createSubmissionResponse! @join__field(graph: SUBMIT)
  createTwitterSubmission(contestId: ID!, submission: TwitterSubmissionPayload!): createSubmissionResponse! @join__field(graph: SUBMIT)
  castVotes(contestId: ID!, castVotePayload: [CastVotePayload!]!): CastVoteResponse! @join__field(graph: VOTE)
  removeSingleVote(submissionId: ID!, contestId: ID!): RemoveSingleVoteResponse! @join__field(graph: VOTE)
  removeAllVotes(contestId: ID!): RemoveAllVotesResponse! @join__field(graph: VOTE)
}

input NativeTokenInput
  @join__type(graph: CONTESTS)
{
  type: NativeTokenTypeEnum!
  symbol: NativeTokenTypeEnum!
  decimals: Int!
}

enum NativeTokenTypeEnum
  @join__type(graph: CONTESTS)
{
  ETH @join__enumValue(graph: CONTESTS)
}

input NonFungiblePayoutInput
  @join__type(graph: CONTESTS)
{
  tokenId: Int!
}

type NonFungibleReward
  @join__type(graph: CONTESTS)
{
  token: Token!
  tokenId: Int!
}

input PayoutInput
  @join__type(graph: CONTESTS)
{
  rank: Int!
  ETH: FungiblePayoutInput
  ERC20: FungiblePayoutInput
  ERC721: NonFungiblePayoutInput
  ERC1155: FungiblePayoutInput
}

type PopularSubmission
  @join__type(graph: SUBMIT, key: "id")
{
  id: ID!
  contestId: ID!
  created: String!
  type: String!
  version: String!
  author: String!
  url: String!
}

input PromptInput
  @join__type(graph: CONTESTS)
{
  title: String!
  body: EditorData!
  coverUrl: IpfsUrl
}

type Query
  @join__type(graph: CONTESTS)
  @join__type(graph: SPACES)
  @join__type(graph: SUBMIT)
  @join__type(graph: USER)
  @join__type(graph: VOTE)
{
  contest(contestId: ID!): Contest @join__field(graph: CONTESTS)
  activeContests: [Contest!]! @join__field(graph: CONTESTS)
  isContestTweetQueued(contestId: ID!): Boolean! @join__field(graph: CONTESTS)
  space(id: ID, name: String): Space @join__field(graph: SPACES)
  spaces: [Space!]! @join__field(graph: SPACES)
  submission(submissionId: ID!): Submission @join__field(graph: SUBMIT)
  popularSubmissions: [PopularSubmission!]! @join__field(graph: SUBMIT)
  getUserSubmissionParams(contestId: ID!): UserSubmissionParams! @join__field(graph: SUBMIT)
  me: User @join__field(graph: USER)
  user(id: ID, address: String): User @join__field(graph: USER)
  getUserVotingParams(contestId: ID!): UserVotingParams! @join__field(graph: VOTE)
}

type RemoveAllVotesResponse
  @join__type(graph: VOTE)
{
  success: Boolean!
  userVotingParams: UserVotingParams!
}

type RemoveSingleVoteResponse
  @join__type(graph: VOTE)
{
  success: Boolean!
  userVotingParams: UserVotingParams!
}

type RestrictionResult
  @join__type(graph: SUBMIT)
{
  restriction: Submit_Restriction!
  result: Boolean!
}

input RestrictionTokenInput
  @join__type(graph: CONTESTS)
{
  type: RestrictionTokenTypeEnum!
  address: String
  symbol: String!
  decimals: Int!
  tokenId: Int
}

enum RestrictionTokenTypeEnum
  @join__type(graph: CONTESTS)
{
  ETH @join__enumValue(graph: CONTESTS)
  ERC20 @join__enumValue(graph: CONTESTS)
  ERC721 @join__enumValue(graph: CONTESTS)
  ERC1155 @join__enumValue(graph: CONTESTS)
}

enum RestrictionType
  @join__type(graph: CONTESTS)
{
  token @join__enumValue(graph: CONTESTS)
}

type Space
  @join__type(graph: CONTESTS, key: "id", extension: true)
  @join__type(graph: SPACES, key: "id")
  @join__type(graph: SUBMIT, key: "id")
{
  id: ID!
  admins: [Admin!]! @join__field(graph: CONTESTS, external: true) @join__field(graph: SPACES)
  contests: [Contest!]! @join__field(graph: CONTESTS, requires: "admins { address }")
  name: String! @join__field(graph: SPACES)
  displayName: String! @join__field(graph: SPACES)
  members: Int! @join__field(graph: SPACES)
  logoUrl: String! @join__field(graph: SPACES)
  twitter: String @join__field(graph: SPACES)
  website: String @join__field(graph: SPACES)
  spaceTokens: [SpaceTokenMap!]! @join__field(graph: SPACES)
}

type SpaceBuilderErrors
  @join__type(graph: SPACES)
{
  name: String
  logoUrl: String
  website: String
  twitter: String
  admins: String
}

input SpaceBuilderInput
  @join__type(graph: SPACES)
{
  name: String!
  logoUrl: IpfsUrl!
  website: String
  twitter: String
  admins: [String!]!
}

type SpaceMutationResponse
  @join__type(graph: SPACES)
{
  spaceName: String
  success: Boolean!
  errors: SpaceBuilderErrors
}

type SpaceStub
  @join__type(graph: CONTESTS, key: "id", extension: true)
  @join__type(graph: SPACES, key: "id")
{
  id: ID!
  name: String! @join__field(graph: SPACES)
  displayName: String! @join__field(graph: SPACES)
  members: Int! @join__field(graph: SPACES)
  logoUrl: String! @join__field(graph: SPACES)
  twitter: String @join__field(graph: SPACES)
  website: String @join__field(graph: SPACES)
  admins: [Admin!]! @join__field(graph: SPACES)
}

type SpaceToken
  @join__type(graph: SPACES)
{
  id: ID!
  type: TokenStandard!
  tokenHash: String!
  symbol: String!
  decimals: Int!
  address: String
  tokenId: Int
}

type SpaceTokenMap
  @join__type(graph: SPACES)
{
  id: ID!
  spaceId: ID!
  tokenLink: Int!
  token: SpaceToken!
}

type Submission
  @join__type(graph: SUBMIT, key: "id")
{
  id: ID!
  contestId: ID!
  created: String!
  type: String!
  version: String!
  author: String
  url: String!
  totalVotes: Decimal
  rank: Int
}

scalar SubmissionAssetUrl
  @join__type(graph: SUBMIT)

input SubmissionPayload
  @join__type(graph: SUBMIT)
{
  title: String!
  previewAsset: SubmissionAssetUrl
  videoAsset: SubmissionAssetUrl
  body: EditorData
}

type Submit_Restriction
  @join__type(graph: SUBMIT)
{
  restrictionType: String!
  tokenRestriction: Submit_TokenRestriction
}

type Submit_Token
  @join__type(graph: SUBMIT)
{
  type: String!
  decimals: Int!
  symbol: String!
  address: String
  tokenId: String
}

type Submit_TokenRestriction
  @join__type(graph: SUBMIT)
{
  token: Submit_Token!
  threshold: Decimal!
}

union SubmitterRestriction
  @join__type(graph: CONTESTS)
  @join__unionMember(graph: CONTESTS, member: "TokenRestrictionOption")
 = TokenRestrictionOption

input SubmitterRestrictionInput
  @join__type(graph: CONTESTS)
{
  token: RestrictionTokenInput
  threshold: String
}

type SubmitterReward
  @join__type(graph: CONTESTS)
{
  rank: Int!
  reward: SubmitterRewardOption!
}

union SubmitterRewardOption
  @join__type(graph: CONTESTS)
  @join__unionMember(graph: CONTESTS, member: "SubmitterTokenReward")
 = SubmitterTokenReward

input SubmitterRewardsInput
  @join__type(graph: CONTESTS)
{
  ETH: NativeTokenInput
  ERC20: ERCTokenInput
  ERC721: ERCTokenInput
  ERC1155: ERCTokenInput
  payouts: [PayoutInput!]
}

type SubmitterTokenReward
  @join__type(graph: CONTESTS)
{
  tokenReward: SubmitterTokenRewardOption!
}

union SubmitterTokenRewardOption
  @join__type(graph: CONTESTS)
  @join__unionMember(graph: CONTESTS, member: "FungibleReward")
  @join__unionMember(graph: CONTESTS, member: "NonFungibleReward")
 = FungibleReward | NonFungibleReward

input ThreadItemInput
  @join__type(graph: CONTESTS)
{
  text: String
  previewAsset: IpfsUrl
  videoAsset: IpfsUrl
  assetSize: Int
  assetType: String
}

input ThreadPayload
  @join__type(graph: SUBMIT)
{
  text: String
  previewAsset: SubmissionAssetUrl
  videoAsset: SubmissionAssetUrl
  assetSize: Int
  assetType: String
}

type Token
  @join__type(graph: CONTESTS)
{
  tokenHash: String!
  type: String!
  symbol: String!
  decimals: Int!
  address: String
  tokenId: Int
}

type TokenRestriction
  @join__type(graph: CONTESTS)
{
  token: Token!
  threshold: String!
}

type TokenRestrictionOption
  @join__type(graph: CONTESTS)
{
  restrictionType: RestrictionType!
  tokenRestriction: TokenRestriction!
}

enum TokenStandard
  @join__type(graph: SPACES)
{
  ETH @join__enumValue(graph: SPACES)
  ERC20 @join__enumValue(graph: SPACES)
  ERC721 @join__enumValue(graph: SPACES)
  ERC1155 @join__enumValue(graph: SPACES)
}

input TwitterSubmissionPayload
  @join__type(graph: SUBMIT)
{
  title: String!
  thread: [ThreadPayload!]!
}

type User
  @join__type(graph: USER, key: "id")
{
  id: ID
  address: String
}

type UserSubmissionParams
  @join__type(graph: SUBMIT)
{
  maxSubPower: Int!
  remainingSubPower: Int!
  restrictionResults: [RestrictionResult!]!
  userSubmissions: [Submission!]!
}

type UserVotingParams
  @join__type(graph: VOTE)
{
  totalVotingPower: Decimal!
  votesSpent: Decimal!
  votesRemaining: Decimal!
  userVotes: [VoteObject!]!
}

type Vote
  @join__type(graph: VOTE, key: "id")
{
  id: ID!
  submissionId: ID!
  votes: Decimal!
}

type VoteObject
  @join__type(graph: VOTE)
{
  id: ID!
  votes: Decimal!
  submissionId: ID!
  submissionUrl: IpfsUrl!
}

type VoterReward
  @join__type(graph: CONTESTS)
{
  rank: Int!
  reward: VoterRewardOption!
}

union VoterRewardOption
  @join__type(graph: CONTESTS)
  @join__unionMember(graph: CONTESTS, member: "VoterTokenReward")
 = VoterTokenReward

input VoterRewardsInput
  @join__type(graph: CONTESTS)
{
  ETH: NativeTokenInput
  ERC20: ERCTokenInput
  payouts: [PayoutInput!]
}

type VoterTokenReward
  @join__type(graph: CONTESTS)
{
  tokenReward: VoterTokenRewardOption!
}

union VoterTokenRewardOption
  @join__type(graph: CONTESTS)
  @join__unionMember(graph: CONTESTS, member: "FungibleReward")
 = FungibleReward

input VotingPolicyInput
  @join__type(graph: CONTESTS)
{
  token: RestrictionTokenInput!
  strategy: VotingStrategyInput!
}

union VotingStrategy
  @join__type(graph: CONTESTS)
  @join__unionMember(graph: CONTESTS, member: "ArcadeVotingStrategyOption")
  @join__unionMember(graph: CONTESTS, member: "WeightedVotingStrategyOption")
 = ArcadeVotingStrategyOption | WeightedVotingStrategyOption

input VotingStrategyInput
  @join__type(graph: CONTESTS)
{
  type: VotingStrategyTypeEnum!
  votingPower: String
}

enum VotingStrategyTypeEnum
  @join__type(graph: CONTESTS)
{
  arcade @join__enumValue(graph: CONTESTS)
  weighted @join__enumValue(graph: CONTESTS)
}

type WeightedVotingStrategy
  @join__type(graph: CONTESTS)
{
  token: Token!
}

type WeightedVotingStrategyOption
  @join__type(graph: CONTESTS)
{
  strategyType: VotingStrategyTypeEnum!
  weightedVotingStrategy: WeightedVotingStrategy!
}
