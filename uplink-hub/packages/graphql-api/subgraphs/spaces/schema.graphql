scalar IpfsUrl

type Space @key(fields: "id") {
  id: ID!
  name: String!
  displayName: String!
  members: Int!
  logoUrl: String!
  twitter: String
  website: String
  admins: [Admin!]!
  spaceTokens: [SpaceTokenMap!]!
  mintBoard: MintBoard
}

# this is a stub for the federated space to avoid circular reference.
# it's placed here since it may be used by other federated services in the future.
type SpaceStub @key(fields: "id") {
  id: ID!
  name: String!
  displayName: String!
  members: Int!
  logoUrl: String!
  twitter: String
  website: String
  admins: [Admin!]!
}

type Admin @key(fields: "id"){
  id: ID!
  spaceId: ID!
  address: String!
}

type MintBoard @key(fields: "id"){
  id: ID!
  spaceId: ID!
  created: String!
  chainId: Int!
  enabled: Boolean!
  boardTitle: String!
  boardDescription: String!
  name: String!
  symbol: String!
  editionSize: String!
  publicSalePrice: String!
  publicSaleStart: String!
  publicSaleEnd: String!
  description: String!
  referrer: String!
  submissions: [MintBoardSubmission!]!
}

type MintBoardSubmission @key(fields: "id"){
  id: ID!
  spaceId: ID!
  created: String!
  chainId: Int!
  contractAddress: String!
  dropConfig: String!
  author: MintBoardAuthor!
}

type MintBoardAuthor @key(fields: "id"){
  id: ID!
  userId: ID!
  address: String!
  userName: String
  displayName: String
  profileAvatar: String
}

enum TokenStandard {
  ETH
  ERC20
  ERC721
  ERC1155
}

type SpaceToken {
  id: ID!
  type: TokenStandard!
  tokenHash: String!
  symbol: String!
  decimals: Int!
  chainId: Int!
  address: String
  tokenId: Int
}

type SpaceTokenMap {
  id: ID!
  spaceId: ID!
  tokenLink: Int!
  token: SpaceToken!
}

type Query {
  space(id: ID, name: String): Space
  spaces: [Space!]!
}

## mutations

type SpaceBuilderErrors {
  name: String
  logoUrl: String
  website: String
  twitter: String
  admins: String
}

type SpaceMutationResponse {
  spaceName: String
  success: Boolean!
  errors: SpaceBuilderErrors
}

input SpaceBuilderInput {
  name: String!
  logoUrl: IpfsUrl!
  website: String
  twitter: String
  admins: [String!]!
}

input MintBoardInput {
  chainId: Int!
  enabled: Boolean!
  boardTitle: String!
  boardDescription: String!
  name: String!
  symbol: String!
  editionSize: String!
  publicSalePrice: String!
  publicSaleStart: String!
  publicSaleEnd: String!
  description: String!
  referrer: String!
}

type ConfigureMintBoardResponse {
  success: Boolean!
}

type Mutation {
  createSpace(spaceData: SpaceBuilderInput!): SpaceMutationResponse!
  editSpace(spaceId: ID!, spaceData: SpaceBuilderInput!): SpaceMutationResponse!
  configureMintBoard(spaceName: String! mintBoardData: MintBoardInput!): ConfigureMintBoardResponse!
}

extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.0"
    import: ["@key", "@shareable"]
  )
