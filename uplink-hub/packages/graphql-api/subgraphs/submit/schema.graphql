scalar Decimal
scalar EditorData
scalar SubmissionAssetUrl
scalar ISODateString


extend type Contest @key(fields: "id") {
  id: ID!
  deadlines: Deadlines! @external
  additionalParams: AdditionalParams! @external
  submissions: [Submission!]!
    @requires(
      fields: "deadlines {startTime, voteTime, endTime, snapshot}, additionalParams {anonSubs, visibleVotes}"
    )
  gnosisResults: String @requires(fields: "deadlines {endTime}")
}

type Deadlines {
  startTime: ISODateString! @external
  voteTime: ISODateString! @external
  endTime: ISODateString! @external
  snapshot: ISODateString! @external
}

type AdditionalParams {
  anonSubs: Boolean! @external
  visibleVotes: Boolean! @external
}

type Space @key(fields: "id") {
  id: ID!
}

type NftDrop {
  chainId: Int!
  contractAddress: String!
  dropConfig: String!
}

type SubmissionAuthor {
  id: ID!
  address: String!
  userName: String
  displayName: String
  profileAvatar: String
}

type Submission @key(fields: "id") {
  id: ID!
  contestId: ID!
  created: String!
  type: String!
  version: String!
  author: SubmissionAuthor
  url: String!
  totalVotes: Decimal
  rank: Int
  nftDrop: NftDrop
}

type PopularSubmission @key(fields: "id") {
  id: ID!
  contestId: ID!
  created: String!
  type: String!
  version: String!
  author: SubmissionAuthor!
  url: String!
  nftDrop: NftDrop
}

type Submit_Token {
  type: String!
  decimals: Int!
  symbol: String!
  address: String
  tokenId: String
}

type Submit_TokenRestriction {
  token: Submit_Token!
  threshold: Decimal!
}

type Submit_Restriction {
  restrictionType: String!
  tokenRestriction: Submit_TokenRestriction
}

type RestrictionResult {
  restriction: Submit_Restriction!
  result: Boolean!
}

type UserSubmissionParams {
  maxSubPower: Int!
  remainingSubPower: Int!
  restrictionResults: [RestrictionResult!]!
  userSubmissions: [Submission!]!
}

type Query {
  submission(submissionId: ID!): Submission
  popularSubmissions: [PopularSubmission!]!
  getUserSubmissionParams(
    contestId: ID!
  ): UserSubmissionParams!
}

type createSubmissionResponse {
  success: Boolean!
  submissionId: ID
  userSubmissionParams: UserSubmissionParams!
}

input SubmissionPayload {
  title: String!
  previewAsset: SubmissionAssetUrl
  videoAsset: SubmissionAssetUrl
  body: EditorData
}

input ThreadPayload {
  text: String
  previewAsset: SubmissionAssetUrl
  videoAsset: SubmissionAssetUrl
  assetSize: Int
  assetType: String
}

input TwitterSubmissionPayload {
  title: String!
  thread: [ThreadPayload!]!
}

input SaleConfig {
  publicSalePrice: String!
  maxSalePurchasePerAddress: Int!
  publicSaleStart: String!
  publicSaleEnd: String!
  presaleStart: String!
  presaleEnd: String!
  presaleMerkleRoot: String!
}

input DropConfig {
  name: String!
  symbol: String!
  editionSize: String!
  royaltyBPS: Int!
  fundsRecipient: String!
  defaultAdmin: String!
  saleConfig: SaleConfig!
  description: String!
  animationURI: String!
  imageURI: String!
  referrer: String!
}

type createUserDropResponse {
  success: Boolean!
}

type Mutation {
  createSubmission(
    contestId: ID!
    submission: SubmissionPayload!
  ): createSubmissionResponse!
  createTwitterSubmission(
    contestId: ID!
    submission: TwitterSubmissionPayload!
  ): createSubmissionResponse!
  createUserDrop(
    submissionId: ID!
    contestId: ID!
    contractAddress: String!
    chainId: Int!
    dropConfig: DropConfig!
  ): createUserDropResponse!
}

extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.0"
    import: ["@key", "@shareable", "@external", "@requires"]
  )
