scalar ISODateString
scalar EditorData
scalar IpfsUrl
scalar Decimal

extend type Space @key(fields: "id") {
  id: ID! @external
  admins: [Admin!]! @external
  contests: [Contest!]! @requires(fields: "admins { address }")
}

type Admin @key(fields: "id") {
  id: ID! @external
  address: String! @external
}

extend type SpaceStub @key(fields: "id") {
  id: ID! @external
}

type MetadataType {
  type: String!
  category: String!
}

type DeadlinesType {
  startTime: String!
  voteTime: String!
  endTime: String!
  snapshot: String!
}

type TokenType {
  tokenHash: String!
  type: String!
  symbol: String!
  decimals: Int!
  address: String
  tokenId: Int
}

type tokenRewardType {
  amount: Decimal
  tokenId: Int
  token: TokenType!
}

type RewardType {
  rank: Int!
  tokenReward: tokenRewardType!
}

type TokenRestrictionType {
  token: TokenType!
  threshold: Decimal!
}

type SubmitterRestrictionType {
  restrictionType: String!
  tokenRestriction: TokenRestrictionType!
}

type ArcadeVotingStrategyType {
  token: TokenType
  votingPower: Decimal
}

type WeightedVotingStrategyType {
  token: TokenType
}

type VotingPolicyType {
  strategyType: VotingStrategyType!
  arcadeVotingStrategy: ArcadeVotingStrategyType
  weightedVotingStrategy: WeightedVotingStrategyType
}

type AdditionalParamsType {
  anonSubs: Boolean!
  visibleVotes: Boolean!
  selfVote: Boolean!
  subLimit: Int!
}

type Contest @key(fields: "id") {
  id: ID!
  spaceId: ID!
  space: SpaceStub!
  created: String!
  metadata: MetadataType!
  deadlines: DeadlinesType!
  promptUrl: IpfsUrl!
  submitterRewards: [RewardType!]!
  voterRewards: [RewardType!]!
  submitterRestrictions: [SubmitterRestrictionType!]!
  votingPolicy: [VotingPolicyType!]!
  additionalParams: AdditionalParamsType!
  tweetId: String
}

extend type Query {
  contest(contestId: ID!): Contest
  activeContests: [Contest!]!
  isContestTweetQueued(contestId: ID!): Boolean!
}

enum ContestType {
  standard
  twitter
}

input Metadata {
  type: ContestType!
  category: String!
}

input Deadlines {
  snapshot: ISODateString!
  startTime: ISODateString!
  voteTime: ISODateString!
  endTime: ISODateString!
}

input Prompt {
  title: String!
  body: EditorData!
  coverUrl: IpfsUrl
}

enum ERCTokenType {
  ERC20
  ERC721
  ERC1155
}

enum NativeTokenType {
  ETH
}

input IERCToken {
  type: ERCTokenType!
  address: String!
  symbol: String!
  decimals: Int!
  tokenId: Int
}

input INativeToken {
  type: NativeTokenType!
  symbol: NativeTokenType!
  decimals: Int!
}

input FungiblePayout {
  amount: Decimal!
}

input NonFungiblePayout {
  tokenId: Int!
}

input IPayout {
  rank: Int!
  ETH: FungiblePayout
  ERC20: FungiblePayout
  ERC721: NonFungiblePayout
  ERC1155: FungiblePayout
}

input SubmitterRewards {
  ETH: INativeToken
  ERC20: IERCToken
  ERC721: IERCToken
  ERC1155: IERCToken
  payouts: [IPayout!]
}

input VoterRewards {
  ETH: INativeToken
  ERC20: IERCToken
  payouts: [IPayout!]
}

enum RestrictionTokenType {
  ETH
  ERC20
  ERC721
  ERC1155
}

input RestrictionToken {
  type: RestrictionTokenType!
  address: String
  symbol: String!
  decimals: Int!
  tokenId: Int
}

input SubmitterRestriction {
  token: RestrictionToken
  threshold: Decimal
}

enum VotingStrategyType {
  arcade
  weighted
}

input VotingStrategy {
  type: VotingStrategyType!
  votingPower: Decimal
}

input VotingPolicy {
  token: RestrictionToken!
  strategy: VotingStrategy!
}

input AdditionalParams {
  anonSubs: Boolean!
  visibleVotes: Boolean!
  selfVote: Boolean!
  subLimit: Int!
}

input ThreadItem {
  text: String
  previewAsset: IpfsUrl
  videoAsset: IpfsUrl
  assetSize: String
  assetType: String
}

input ContestBuilderProps {
  spaceId: ID!
  metadata: Metadata!
  deadlines: Deadlines!
  prompt: Prompt!
  submitterRewards: SubmitterRewards!
  voterRewards: VoterRewards!
  submitterRestrictions: [SubmitterRestriction!]!
  votingPolicy: [VotingPolicy!]!
  additionalParams: AdditionalParams!
}

type ContestErrorData {
  metadata: String
  deadlines: String
  prompt: String
  submitterRewards: String
  voterRewards: String
  submitterRestrictions: String
  votingPolicy: String
  additionalParams: String
}

type ContestMutationResponse {
  success: Boolean!
  contestId: ID
  errors: ContestErrorData
}

type ContestTweetResponse {
  success: Boolean!
  errors: String
}

type Mutation {
  createContest(contestData: ContestBuilderProps!): ContestMutationResponse!
  createContestTweet(
    contestId: ID!
    spaceId: ID!
    tweetThread: [ThreadItem!]!
  ): ContestTweetResponse!
}

extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.0"
    import: ["@key", "@external", "@shareable", "@requires"]
  )
