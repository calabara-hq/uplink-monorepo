scalar ISODateString
scalar EditorData
scalar IpfsUrl
scalar Decimal

extend type Space @key(fields: "id") {
  id: ID! @external
  admins: [Admin!]! @external
  contests: [Contest!]! @requires(fields: "admins { address }")
}

type Admin @key(fields: "id") {
  id: ID! @external
  address: String! @external
}

extend type SpaceStub @key(fields: "id") {
  id: ID! @external
}

enum ContestTypeEnum {
  standard
  twitter
}

enum ContestCategoryEnum {
  art
  music
  writing
  video
  photography
  design
  memes
  other
}

type Metadata {
  type: ContestTypeEnum!
  category: ContestCategoryEnum!
}

type Deadlines {
  startTime: ISODateString!
  voteTime: ISODateString!
  endTime: ISODateString!
  snapshot: ISODateString!
}

type Token {
  tokenHash: String!
  type: String!
  symbol: String!
  decimals: Int!
  address: String
  tokenId: Int
}

type AdditionalParams {
  anonSubs: Boolean!
  visibleVotes: Boolean!
  selfVote: Boolean!
  subLimit: Int!
}

## rewards

type FungibleReward {
  token: Token!
  amount: String!
}

type NonFungibleReward {
  token: Token!
  tokenId: Int!
}

union SubmitterTokenRewardOption = FungibleReward | NonFungibleReward
union VoterTokenRewardOption = FungibleReward

type SubmitterTokenReward {
  tokenReward: SubmitterTokenRewardOption!
}

type VoterTokenReward {
  tokenReward: VoterTokenRewardOption!
}

union SubmitterRewardOption = SubmitterTokenReward
union VoterRewardOption = VoterTokenReward

type SubmitterReward {
  rank: Int!
  reward: SubmitterRewardOption!
}

type VoterReward {
  rank: Int!
  reward: VoterRewardOption!
}

## submitter restrictions

enum RestrictionType {
  token
}

type TokenRestriction {
  token: Token!
  threshold: String!
}

type TokenRestrictionOption {
  restrictionType: RestrictionType!
  tokenRestriction: TokenRestriction!
}

union SubmitterRestriction = TokenRestrictionOption

## voting policy

enum VotingStrategyTypeEnum {
  arcade
  weighted
}

type ArcadeVotingStrategy {
  token: Token!
  votingPower: String!
}

type WeightedVotingStrategy {
  token: Token!
}

type ArcadeVotingStrategyOption {
  strategyType: VotingStrategyTypeEnum!
  arcadeVotingStrategy: ArcadeVotingStrategy!
}

type WeightedVotingStrategyOption {
  strategyType: VotingStrategyTypeEnum!
  weightedVotingStrategy: WeightedVotingStrategy!
}

union VotingStrategy = ArcadeVotingStrategyOption | WeightedVotingStrategyOption

##

type Contest @key(fields: "id") {
  id: ID!
  spaceId: ID!
  space: SpaceStub!
  created: String!
  metadata: Metadata!
  deadlines: Deadlines!
  promptUrl: IpfsUrl!
  additionalParams: AdditionalParams!
  tweetId: String
  submitterRewards: [SubmitterReward!]!
  voterRewards: [VoterReward!]!
  submitterRestrictions: [SubmitterRestriction!]!
  votingPolicy: [VotingStrategy!]!
}

extend type Query {
  contest(contestId: ID!): Contest
  activeContests: [Contest!]!
  isContestTweetQueued(contestId: ID!): Boolean!
}

## muts

input MetadataInput {
  type: ContestTypeEnum!
  category: ContestCategoryEnum!
}

input DeadlinesInput {
  snapshot: ISODateString!
  startTime: ISODateString!
  voteTime: ISODateString!
  endTime: ISODateString!
}

input PromptInput {
  title: String!
  body: EditorData!
  coverUrl: IpfsUrl
}

input AdditionalParamsInput {
  anonSubs: Boolean!
  visibleVotes: Boolean!
  selfVote: Boolean!
  subLimit: Int!
}

enum ERCTokenTypeEnum {
  ERC20
  ERC721
  ERC1155
}

input ERCTokenInput {
  type: ERCTokenTypeEnum!
  address: String!
  symbol: String!
  decimals: Int!
  tokenId: Int
}

enum NativeTokenTypeEnum {
  ETH
}

input NativeTokenInput {
  type: NativeTokenTypeEnum!
  symbol: NativeTokenTypeEnum!
  decimals: Int!
}

input FungiblePayoutInput {
  amount: String!
}

input NonFungiblePayoutInput {
  tokenId: Int!
}

input PayoutInput {
  rank: Int!
  ETH: FungiblePayoutInput
  ERC20: FungiblePayoutInput
  ERC721: NonFungiblePayoutInput
  ERC1155: FungiblePayoutInput
}

input SubmitterRewardsInput {
  ETH: NativeTokenInput
  ERC20: ERCTokenInput
  ERC721: ERCTokenInput
  ERC1155: ERCTokenInput
  payouts: [PayoutInput!]
}

input VoterRewardsInput {
  ETH: NativeTokenInput
  ERC20: ERCTokenInput
  payouts: [PayoutInput!]
}

enum RestrictionTokenTypeEnum {
  ETH
  ERC20
  ERC721
  ERC1155
}

input RestrictionTokenInput {
  type: RestrictionTokenTypeEnum!
  address: String
  symbol: String!
  decimals: Int!
  tokenId: Int
}

input SubmitterRestrictionInput {
  token: RestrictionTokenInput
  threshold: String
}

input VotingStrategyInput {
  type: VotingStrategyTypeEnum!
  votingPower: String
}

input VotingPolicyInput {
  token: RestrictionTokenInput!
  strategy: VotingStrategyInput!
}

input ThreadItemInput {
  text: String
  previewAsset: IpfsUrl
  videoAsset: IpfsUrl
  assetSize: Int
  assetType: String
}

input CreateContestData {
  metadata: MetadataInput!
  deadlines: DeadlinesInput!
  prompt: PromptInput!
  submitterRewards: SubmitterRewardsInput!
  voterRewards: VoterRewardsInput!
  submitterRestrictions: [SubmitterRestrictionInput!]!
  votingPolicy: [VotingPolicyInput!]!
  additionalParams: AdditionalParamsInput!
}

type ContestMutationResponse {
  success: Boolean!
  contestId: ID
}

type ContestTweetResponse {
  success: Boolean!
  errors: String
}

type Mutation {
  createContest(
    spaceId: ID!
    contestData: CreateContestData!
  ): ContestMutationResponse!
  createContestTweet(
    contestId: ID!
    spaceId: ID!
    tweetThread: [ThreadItemInput!]!
  ): ContestTweetResponse!
}

extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.0"
    import: ["@key", "@external", "@shareable", "@requires"]
  )
