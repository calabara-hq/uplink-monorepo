datasource db {
  provider     = "mysql"
  url          = env("PRISMA_DATABASE")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(1000)
  expiresAt DateTime

  @@index([id])
}

model Space {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  displayName String
  members     Int
  logoUrl     String
  twitter     String?
  website     String?
  admins      Admin[]
  contests    Contest[]
  tokens      Token[]

  @@index([name])
}

model Admin {
  id      Int    @id @default(autoincrement())
  address String
  space   Space  @relation(fields: [spaceId], references: [id])
  spaceId Int

  @@index([spaceId])
}

model Contest {
  id                    Int                    @id @default(autoincrement())
  space                 Space                  @relation(fields: [spaceId], references: [id])
  spaceId               Int
  created               String
  type                  String
  category              String
  startTime             String
  voteTime              String
  endTime               String
  snapshot              String
  promptUrl             String
  anonSubs              Boolean
  visibleVotes          Boolean
  selfVote              Boolean
  subLimit              Int
  rewards               Reward[]
  submitterRestrictions SubmitterRestriction[]
  votingPolicy          VotingPolicy[]

  @@index([spaceId])
}

model Reward {
  id          Int           @id @default(autoincrement())
  contest     Contest       @relation(fields: [contestId], references: [id])
  contestId   Int
  rank        Int
  recipient   String
  tokenReward TokenReward?

  @@index([contestId])
}

model TokenReward {
  id        Int     @id @default(autoincrement())
  reward    Reward  @relation(fields: [rewardId], references: [id])
  rewardId  Int     @unique
  token     Token   @relation(fields: [tokenLink], references: [id])
  tokenLink Int
  amount    String?
  tokenId   Int?

  @@index([tokenLink])
}


model SubmitterRestriction {
  id               Int               @id @default(autoincrement())
  contest          Contest           @relation(fields: [contestId], references: [id])
  contestId        Int
  restrictionType  String
  tokenRestriction TokenRestriction?

  @@index([contestId])
}

model TokenRestriction {
  id                   Int                  @id @default(autoincrement())
  submitterRestriction SubmitterRestriction @relation(fields: [restrictionId], references: [id])
  restrictionId        Int                  @unique
  token                Token                @relation(fields: [tokenLink], references: [id])
  tokenLink            Int
  threshold            String

  @@index([tokenLink])
}

model VotingPolicy {
  id                   Int                   @id @default(autoincrement())
  contest              Contest               @relation(fields: [contestId], references: [id])
  contestId            Int
  strategyType         String
  arcadeVotingPolicy   ArcadeVotingPolicy?
  weightedVotingPolicy WeightedVotingPolicy?

  @@index([contestId])
}

model ArcadeVotingPolicy {
  id             Int          @id @default(autoincrement())
  votingPolicy   VotingPolicy @relation(fields: [votingPolicyId], references: [id])
  votingPolicyId Int          @unique
  votingPower    String
  token          Token        @relation(fields: [tokenLink], references: [id])
  tokenLink      Int

  @@index([tokenLink])
}

model WeightedVotingPolicy {
  id             Int          @id @default(autoincrement())
  votingPolicy   VotingPolicy @relation(fields: [votingPolicyId], references: [id])
  votingPolicyId Int          @unique
  token          Token        @relation(fields: [tokenLink], references: [id])
  tokenLink      Int

  @@index([tokenLink])
}

model Token {
  id                   Int                    @id @default(autoincrement())
  tokenHash            String                 @unique
  type                 String
  symbol               String
  decimals             Int
  address              String?
  tokenId              Int?
  spaces               Space[]
  tokenRewards         TokenReward[]
  tokenRestrictions    TokenRestriction[]
  arcadeVotingPolicy   ArcadeVotingPolicy[]
  weightedVotingPolicy WeightedVotingPolicy[]
}
