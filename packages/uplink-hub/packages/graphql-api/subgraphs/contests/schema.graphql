scalar ISODateString
scalar EditorData
scalar IpfsUrl
scalar Decimal

type Space @key(fields: "id") {
  id: ID!
  contests: [Contest!]!
}

type Contest @key(fields: "id") {
  id: Int!
  spaceId: Int!
  spaceName: String!
  tag: String!
  start: String!
  vote: String!
  end: String!
  created: String!
}

type ActiveContest {
  id: Int!
  spaceId: Int!
  tag: String!
  start: String!
  vote: String!
  end: String!
  created: String!
  spaceLink: Space!
}

extend type Query {
  contest(contestId: Int!): Contest!
  #spaceContests(spaceId: Int, spaceName: String): [Contest!]!
  activeContests: [ActiveContest!]!
}

enum ContestType {
  standard
  twitter
}

input Metadata {
  type: ContestType!
  category: String!
}

input Deadlines {
  snapshot: ISODateString!
  startTime: ISODateString!
  voteTime: ISODateString!
  endTime: ISODateString!
}

input Prompt {
  title: String!
  body: EditorData!
  coverUrl: IpfsUrl
}

enum ERCTokenType {
  ERC20
  ERC721
  ERC1155
}

enum NativeTokenType {
  ETH
}

input IERCToken {
  type: ERCTokenType!
  address: String!
  symbol: String!
  decimals: Int!
  tokenId: Int
}

input INativeToken {
  type: NativeTokenType!
  symbol: NativeTokenType!
  decimals: Int!
}

input FungiblePayout {
  amount: Decimal!
}

input NonFungiblePayout {
  tokenId: Int!
}

input IPayout {
  rank: Int!
  ETH: FungiblePayout
  ERC20: FungiblePayout
  ERC721: NonFungiblePayout
  ERC1155: FungiblePayout
}

input SubmitterRewards {
  ETH: INativeToken
  ERC20: IERCToken
  ERC721: IERCToken
  ERC1155: IERCToken
  payouts: [IPayout!]
}

input VoterRewards {
  ETH: INativeToken
  ERC20: IERCToken
  payouts: [IPayout!]
}

enum RestrictionTokenType {
  ETH
  ERC20
  ERC721
  ERC1155
}

input RestrictionToken {
  type: RestrictionTokenType!
  address: String
  symbol: String!
  decimals: Int!
  tokenId: Int
}

input SubmitterRestriction {
  token: RestrictionToken
  threshold: Decimal
}

enum VotingStrategyType {
  arcade
  weighted
}

input VotingStrategy {
  type: VotingStrategyType!
  votingPower: Decimal
}

input VotingPolicy {
  token: RestrictionToken!
  strategy: VotingStrategy!
}

input AdditionalParams {
  anonSubs: Boolean!
  visibleVotes: Boolean!
  selfVote: Boolean!
  subLimit: Int!
}

input ContestBuilderProps {
  metadata: Metadata!
  deadlines: Deadlines!
  prompt: Prompt!
  submitterRewards: SubmitterRewards!
  voterRewards: VoterRewards!
  submitterRestrictions: [SubmitterRestriction!]!
  votingPolicy: [VotingPolicy!]!
  additionalParams: AdditionalParams!
}

type ContestErrorData {
  metadata: String
  deadlines: String
  prompt: String
  submitterRewards: String
  voterRewards: String
  submitterRestrictions: String
  votingPolicy: String
  additionalParams: String
}

type ContestMutationResponse {
  success: Boolean!
  errors: ContestErrorData
}

type Mutation {
  createContest(contestData: ContestBuilderProps!): ContestMutationResponse!
}

extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.0"
    import: ["@key", "@external", "@shareable"]
  )
