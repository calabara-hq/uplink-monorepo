schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type ActiveContest
  @join__type(graph: CONTESTS)
{
  id: Int!
  spaceId: Int!
  tag: String!
  start: String!
  vote: String!
  end: String!
  created: String!
  spaceLink: Space!
}

type Admin
  @join__type(graph: SPACES)
{
  id: Int!
  spaceId: Int!
  address: String!
}

input AlterSpaceInput
  @join__type(graph: SPACES)
{
  ens: String!
  name: String!
  logo_url: String!
  website: String
  twitter: String
  admins: [String!]!
}

type Contest
  @join__type(graph: CONTESTS, key: "id")
{
  id: Int!
  spaceId: Int!
  spaceName: String!
  tag: String!
  start: String!
  vote: String!
  end: String!
  created: String!
}

type EnsResponse
  @join__type(graph: SPACES)
{
  success: Boolean!
  errors: ErrorData
  ens: String!
}

type ErrorData
  @join__type(graph: SPACES)
{
  ens: String
  name: String
  logo_url: String
  website: String
  twitter: String
  admins: [String]
  topLevelAdminsError: String
}

type FieldResponse
  @join__type(graph: SPACES)
{
  value: String!
  error: String
}

scalar join__FieldSet

enum join__Graph {
  CONTESTS @join__graph(name: "contests", url: "http://contests:4000/graphql")
  SPACES @join__graph(name: "spaces", url: "http://spaces:4000/graphql")
  SUBMISSIONS @join__graph(name: "submissions", url: "http://submissions:4000/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: SPACES)
{
  createSpace(spaceData: AlterSpaceInput!): SpaceMutationResponse!
  editSpace(spaceData: AlterSpaceInput!): SpaceMutationResponse!
}

type Query
  @join__type(graph: CONTESTS)
  @join__type(graph: SPACES)
  @join__type(graph: SUBMISSIONS)
{
  contest(contestId: Int!): Contest! @join__field(graph: CONTESTS)
  activeContests: [ActiveContest!]! @join__field(graph: CONTESTS)
  space(id: ID!): Space @join__field(graph: SPACES)
  spaces: [Space!]! @join__field(graph: SPACES)
  isEnsValid(ens: String!): EnsResponse! @join__field(graph: SPACES)
  submissions(contestId: Int!): [Submission!]! @join__field(graph: SUBMISSIONS)
  submission(submissionId: Int!): Submission! @join__field(graph: SUBMISSIONS)
}

type Space
  @join__type(graph: CONTESTS, key: "id")
  @join__type(graph: SPACES, key: "id")
{
  id: ID!
  contests: [Contest!]! @join__field(graph: CONTESTS)
  name: String! @join__field(graph: SPACES)
  members: Int! @join__field(graph: SPACES)
  logo_url: String! @join__field(graph: SPACES)
  twitter: String @join__field(graph: SPACES)
  website: String @join__field(graph: SPACES)
  admins: [Admin!]! @join__field(graph: SPACES)
}

type SpaceMutationResponse
  @join__type(graph: SPACES)
{
  success: Boolean!
  errors: ErrorData
  spaceResponse: SpaceResponse!
}

type SpaceResponse
  @join__type(graph: SPACES)
{
  id: ID
  ens: String!
  name: String!
  logo_url: String!
  website: String!
  twitter: String!
  admins: [String!]!
}

type Submission
  @join__type(graph: SUBMISSIONS, key: "id")
{
  id: Int!
  contestId: Int!
  author: String!
  url: String!
  created: String!
}
