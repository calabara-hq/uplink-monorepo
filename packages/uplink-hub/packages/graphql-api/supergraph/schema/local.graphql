schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type ActiveContest
  @join__type(graph: CONTESTS)
{
  id: Int!
  spaceId: Int!
  tag: String!
  start: String!
  vote: String!
  end: String!
  created: String!
  spaceLink: Space!
}

input authDataInput
  @join__type(graph: USER)
{
  message: String!
  signature: String!
}

type Contest
  @join__type(graph: CONTESTS, key: "id")
{
  id: Int!
  spaceId: Int!
  tag: String!
  start: String!
  vote: String!
  end: String!
  created: String!
}

type FieldResponse
  @join__type(graph: SPACES)
{
  value: String!
  error: String
}

scalar join__FieldSet

enum join__Graph {
  CONTESTS @join__graph(name: "contests", url: "http://localhost:4003/graphql")
  SPACES @join__graph(name: "spaces", url: "http://localhost:4002/graphql")
  SUBMISSIONS @join__graph(name: "submissions", url: "http://localhost:4004/graphql")
  USER @join__graph(name: "user", url: "http://localhost:4005/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: SPACES)
  @join__type(graph: USER)
{
  createSpace(spaceData: SpaceInput!): SpaceMutationResponse! @join__field(graph: SPACES)
  signIn(authData: authDataInput): signInResponse! @join__field(graph: USER)
}

type NonceResult
  @join__type(graph: USER)
{
  nonce: Int!
}

type Query
  @join__type(graph: CONTESTS)
  @join__type(graph: SPACES)
  @join__type(graph: SUBMISSIONS)
  @join__type(graph: USER)
{
  contest(contestId: Int!): Contest! @join__field(graph: CONTESTS)
  spaceContests(spaceId: Int!): [Contest!]! @join__field(graph: CONTESTS)
  activeContests: [ActiveContest!]! @join__field(graph: CONTESTS)
  space(id: Int!): Space @join__field(graph: SPACES)
  spaces: [Space!]! @join__field(graph: SPACES)
  submissions(contestId: Int!): [Submission!]! @join__field(graph: SUBMISSIONS)
  submission(submissionId: Int!): Submission! @join__field(graph: SUBMISSIONS)
  me: User! @join__field(graph: USER)
  generateNonce: NonceResult! @join__field(graph: USER)
}

type signInResponse
  @join__type(graph: USER)
{
  code: Int!
  success: Boolean!
  message: String!
}

type Space
  @join__type(graph: CONTESTS, key: "id")
  @join__type(graph: SPACES, key: "id")
{
  id: Int!
  name: String! @join__field(graph: SPACES)
  members: Int! @join__field(graph: SPACES)
  logo_url: String! @join__field(graph: SPACES)
  twitter: String @join__field(graph: SPACES)
  website: String @join__field(graph: SPACES)
  admins: [String!]! @join__field(graph: SPACES)
}

input SpaceInput
  @join__type(graph: SPACES)
{
  name: String!
  logo_url: String!
  website: String
  twitter: String
  admins: [String!]!
}

type SpaceMutationResponse
  @join__type(graph: SPACES)
{
  success: Boolean!
  errors: [String!]
  spaceResponse: SpaceResponse!
}

type SpaceResponse
  @join__type(graph: SPACES)
{
  name: FieldResponse!
  logo_url: FieldResponse!
  website: FieldResponse!
  twitter: FieldResponse!
  admins: [FieldResponse!]!
}

type Submission
  @join__type(graph: SUBMISSIONS, key: "id")
{
  id: Int!
  contestId: Int!
  author: String!
  url: String!
  created: String!
}

type User
  @join__type(graph: USER, key: "address")
{
  address: ID!
  isAuthenticated: Boolean!
}
