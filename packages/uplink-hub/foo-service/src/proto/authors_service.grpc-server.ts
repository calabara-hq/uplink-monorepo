// @generated by protobuf-ts 2.8.2 with parameter generate_dependencies,long_type_string,server_grpc1
// @generated from protobuf file "authors_service.proto" (package "authors.v1", syntax proto3)
// tslint:disable
import { ListAuthorsResponse } from "./authors_service";
import { ListAuthorsRequest } from "./authors_service";
import { Author } from "./authors_service";
import { GetAuthorRequest } from "./authors_service";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service authors.v1.AuthorsService
 */
export interface IAuthorsService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: GetAuthor(authors.v1.GetAuthorRequest) returns (authors.v1.Author);
     */
    getAuthor: grpc.handleUnaryCall<GetAuthorRequest, Author>;
    /**
     * @generated from protobuf rpc: ListAuthors(authors.v1.ListAuthorsRequest) returns (authors.v1.ListAuthorsResponse);
     */
    listAuthors: grpc.handleUnaryCall<ListAuthorsRequest, ListAuthorsResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service authors.v1.AuthorsService.
 *
 * Usage: Implement the interface IAuthorsService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IAuthorsService = ...
 * server.addService(authorsServiceDefinition, service);
 * ```
 */
export const authorsServiceDefinition: grpc.ServiceDefinition<IAuthorsService> = {
    getAuthor: {
        path: "/authors.v1.AuthorsService/GetAuthor",
        originalName: "GetAuthor",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Author.fromBinary(bytes),
        requestDeserialize: bytes => GetAuthorRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Author.toBinary(value)),
        requestSerialize: value => Buffer.from(GetAuthorRequest.toBinary(value))
    },
    listAuthors: {
        path: "/authors.v1.AuthorsService/ListAuthors",
        originalName: "ListAuthors",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ListAuthorsResponse.fromBinary(bytes),
        requestDeserialize: bytes => ListAuthorsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ListAuthorsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ListAuthorsRequest.toBinary(value))
    }
};
