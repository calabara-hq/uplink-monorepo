Object.defineProperty(exports, "__esModule", {
  value: !0
});

var e;

!function(e) {
  e[e.Pull = 0] = "Pull";
  e[e.Close = 1] = "Close";
}(e || (e = {}));

var r;

!function(e) {
  e[e.Start = 0] = "Start";
  e[e.Push = 1] = "Push";
  e[e.End = 0] = "End";
}(r || (r = {}));

var teardownPlaceholder = () => {};

var t = teardownPlaceholder;

function start(e) {
  var t = [ e ];
  t.tag = r.Start;
  return t;
}

function push(e) {
  var t = [ e ];
  t.tag = r.Push;
  return t;
}

var identity = e => e;

function concatMap(l) {
  return s => n => {
    var a = [];
    var i = t;
    var f = t;
    var o = !1;
    var u = !1;
    var v = !1;
    var c = !1;
    function applyInnerSource(t) {
      v = !0;
      t((t => {
        if (t === r.End) {
          if (v) {
            v = !1;
            if (a.length) {
              applyInnerSource(l(a.shift()));
            } else if (c) {
              n(r.End);
            } else if (!o) {
              o = !0;
              i(e.Pull);
            }
          }
        } else if (t.tag === r.Start) {
          u = !1;
          (f = t[0])(e.Pull);
        } else if (v) {
          n(t);
          if (u) {
            u = !1;
          } else {
            f(e.Pull);
          }
        }
      }));
    }
    s((e => {
      if (c) {} else if (e === r.End) {
        c = !0;
        if (!v && !a.length) {
          n(r.End);
        }
      } else if (e.tag === r.Start) {
        i = e[0];
      } else {
        o = !1;
        if (v) {
          a.push(e[0]);
        } else {
          applyInnerSource(l(e[0]));
        }
      }
    }));
    n(start((r => {
      if (r === e.Close) {
        if (!c) {
          c = !0;
          i(e.Close);
        }
        if (v) {
          v = !1;
          f(e.Close);
        }
      } else {
        if (!c && !o) {
          o = !0;
          i(e.Pull);
        }
        if (v && !u) {
          u = !0;
          f(e.Pull);
        }
      }
    })));
  };
}

function concatAll(e) {
  return concatMap(identity)(e);
}

function mergeMap(l) {
  return s => n => {
    var a = [];
    var i = t;
    var f = !1;
    var o = !1;
    s((s => {
      if (o) {} else if (s === r.End) {
        o = !0;
        if (!a.length) {
          n(r.End);
        }
      } else if (s.tag === r.Start) {
        i = s[0];
      } else {
        f = !1;
        !function applyInnerSource(l) {
          var s = t;
          l((t => {
            if (t === r.End) {
              if (a.length) {
                var l = a.indexOf(s);
                if (l > -1) {
                  (a = a.slice()).splice(l, 1);
                }
                if (!a.length) {
                  if (o) {
                    n(r.End);
                  } else if (!f) {
                    f = !0;
                    i(e.Pull);
                  }
                }
              }
            } else if (t.tag === r.Start) {
              a.push(s = t[0]);
              s(e.Pull);
            } else if (a.length) {
              n(t);
              s(e.Pull);
            }
          }));
        }(l(s[0]));
        if (!f) {
          f = !0;
          i(e.Pull);
        }
      }
    }));
    n(start((r => {
      if (r === e.Close) {
        if (!o) {
          o = !0;
          i(e.Close);
        }
        for (var t = 0, l = a, s = a.length; t < s; t++) {
          l[t](e.Close);
        }
        a.length = 0;
      } else {
        if (!o && !f) {
          f = !0;
          i(e.Pull);
        } else {
          f = !1;
        }
        for (var n = 0, u = a, v = a.length; n < v; n++) {
          u[n](e.Pull);
        }
      }
    })));
  };
}

function mergeAll(e) {
  return mergeMap(identity)(e);
}

function onPush(t) {
  return l => s => {
    var n = !1;
    l((l => {
      if (n) {} else if (l === r.End) {
        n = !0;
        s(r.End);
      } else if (l.tag === r.Start) {
        var a = l[0];
        s(start((r => {
          if (r === e.Close) {
            n = !0;
          }
          a(r);
        })));
      } else {
        t(l[0]);
        s(l);
      }
    }));
  };
}

function share(l) {
  var s = [];
  var n = t;
  var a = !1;
  return t => {
    s.push(t);
    if (1 === s.length) {
      l((e => {
        if (e === r.End) {
          for (var t = 0, l = s, i = s.length; t < i; t++) {
            l[t](r.End);
          }
          s.length = 0;
        } else if (e.tag === r.Start) {
          n = e[0];
        } else {
          a = !1;
          for (var f = 0, o = s, u = s.length; f < u; f++) {
            o[f](e);
          }
        }
      }));
    }
    t(start((r => {
      if (r === e.Close) {
        var l = s.indexOf(t);
        if (l > -1) {
          (s = s.slice()).splice(l, 1);
        }
        if (!s.length) {
          n(e.Close);
        }
      } else if (!a) {
        a = !0;
        n(e.Pull);
      }
    })));
  };
}

function switchMap(l) {
  return s => n => {
    var a = t;
    var i = t;
    var f = !1;
    var o = !1;
    var u = !1;
    var v = !1;
    s((s => {
      if (v) {} else if (s === r.End) {
        v = !0;
        if (!u) {
          n(r.End);
        }
      } else if (s.tag === r.Start) {
        a = s[0];
      } else {
        if (u) {
          i(e.Close);
          i = t;
        }
        if (!f) {
          f = !0;
          a(e.Pull);
        } else {
          f = !1;
        }
        !function applyInnerSource(t) {
          u = !0;
          t((t => {
            if (!u) {} else if (t === r.End) {
              u = !1;
              if (v) {
                n(r.End);
              } else if (!f) {
                f = !0;
                a(e.Pull);
              }
            } else if (t.tag === r.Start) {
              o = !1;
              (i = t[0])(e.Pull);
            } else {
              n(t);
              if (!o) {
                i(e.Pull);
              } else {
                o = !1;
              }
            }
          }));
        }(l(s[0]));
      }
    }));
    n(start((r => {
      if (r === e.Close) {
        if (!v) {
          v = !0;
          a(e.Close);
        }
        if (u) {
          u = !1;
          i(e.Close);
        }
      } else {
        if (!v && !f) {
          f = !0;
          a(e.Pull);
        }
        if (u && !o) {
          o = !0;
          i(e.Pull);
        }
      }
    })));
  };
}

function fromAsyncIterable(t) {
  return l => {
    var s = t[Symbol.asyncIterator]();
    var n = !1;
    var a = !1;
    var i = !1;
    var f;
    l(start((async t => {
      if (t === e.Close) {
        n = !0;
        if (s.return) {
          s.return();
        }
      } else if (a) {
        i = !0;
      } else {
        for (i = a = !0; i && !n; ) {
          if ((f = await s.next()).done) {
            n = !0;
            if (s.return) {
              await s.return();
            }
            l(r.End);
          } else {
            try {
              i = !1;
              l(push(f.value));
            } catch (e) {
              if (s.throw) {
                if (n = !!(await s.throw(e)).done) {
                  l(r.End);
                }
              } else {
                throw e;
              }
            }
          }
        }
        a = !1;
      }
    })));
  };
}

function fromIterable(t) {
  if (t[Symbol.asyncIterator]) {
    return fromAsyncIterable(t);
  }
  return l => {
    var s = t[Symbol.iterator]();
    var n = !1;
    var a = !1;
    var i = !1;
    var f;
    l(start((t => {
      if (t === e.Close) {
        n = !0;
        if (s.return) {
          s.return();
        }
      } else if (a) {
        i = !0;
      } else {
        for (i = a = !0; i && !n; ) {
          if ((f = s.next()).done) {
            n = !0;
            if (s.return) {
              s.return();
            }
            l(r.End);
          } else {
            try {
              i = !1;
              l(push(f.value));
            } catch (e) {
              if (s.throw) {
                if (n = !!s.throw(e).done) {
                  l(r.End);
                }
              } else {
                throw e;
              }
            }
          }
        }
        a = !1;
      }
    })));
  };
}

var l = fromIterable;

function make(t) {
  return l => {
    var s = !1;
    var n = t({
      next(e) {
        if (!s) {
          l(push(e));
        }
      },
      complete() {
        if (!s) {
          s = !0;
          l(r.End);
        }
      }
    });
    l(start((r => {
      if (r === e.Close && !s) {
        s = !0;
        n();
      }
    })));
  };
}

function subscribe(l) {
  return s => {
    var n = t;
    var a = !1;
    s((t => {
      if (t === r.End) {
        a = !0;
      } else if (t.tag === r.Start) {
        (n = t[0])(e.Pull);
      } else if (!a) {
        l(t[0]);
        n(e.Pull);
      }
    }));
    return {
      unsubscribe() {
        if (!a) {
          a = !0;
          n(e.Close);
        }
      }
    };
  };
}

var s = {
  done: !0
};

function zip(l) {
  var s = Object.keys(l).length;
  return n => {
    var a = new Set;
    var i = Array.isArray(l) ? new Array(s).fill(t) : {};
    var f = Array.isArray(l) ? new Array(s) : {};
    var o = !1;
    var u = !1;
    var v = !1;
    var c = 0;
    var loop = function(p) {
      l[p]((d => {
        if (d === r.End) {
          if (c >= s - 1) {
            v = !0;
            n(r.End);
          } else {
            c++;
          }
        } else if (d.tag === r.Start) {
          i[p] = d[0];
        } else if (!v) {
          f[p] = d[0];
          a.add(p);
          if (!o && a.size < s) {
            if (!u) {
              for (var h in l) {
                if (!a.has(h)) {
                  (i[h] || t)(e.Pull);
                }
              }
            } else {
              u = !1;
            }
          } else {
            o = !0;
            u = !1;
            n(push(Array.isArray(f) ? f.slice() : {
              ...f
            }));
          }
        }
      }));
    };
    for (var p in l) {
      loop(p);
    }
    n(start((r => {
      if (v) {} else if (r === e.Close) {
        v = !0;
        for (var t in i) {
          i[t](e.Close);
        }
      } else if (!u) {
        u = !0;
        for (var l in i) {
          i[l](e.Pull);
        }
      }
    })));
  };
}

var observableSymbol = () => Symbol.observable || "@@observable";

exports.buffer = function buffer(l) {
  return s => n => {
    var a = [];
    var i = t;
    var f = t;
    var o = !1;
    var u = !1;
    s((t => {
      if (u) {} else if (t === r.End) {
        u = !0;
        f(e.Close);
        if (a.length) {
          n(push(a));
        }
        n(r.End);
      } else if (t.tag === r.Start) {
        i = t[0];
        l((t => {
          if (u) {} else if (t === r.End) {
            u = !0;
            i(e.Close);
            if (a.length) {
              n(push(a));
            }
            n(r.End);
          } else if (t.tag === r.Start) {
            f = t[0];
          } else if (a.length) {
            var l = push(a);
            a = [];
            n(l);
          }
        }));
      } else {
        a.push(t[0]);
        if (!o) {
          o = !0;
          i(e.Pull);
          f(e.Pull);
        } else {
          o = !1;
        }
      }
    }));
    n(start((r => {
      if (r === e.Close && !u) {
        u = !0;
        i(e.Close);
        f(e.Close);
      } else if (!u && !o) {
        o = !0;
        i(e.Pull);
        f(e.Pull);
      }
    })));
  };
};

exports.combine = function combine(...e) {
  return zip(e);
};

exports.concat = function concat(e) {
  return concatAll(l(e));
};

exports.concatAll = concatAll;

exports.concatMap = concatMap;

exports.debounce = function debounce(t) {
  return l => s => {
    var n;
    var a = !1;
    var i = !1;
    l((l => {
      if (i) {} else if (l === r.End) {
        i = !0;
        if (n) {
          a = !0;
        } else {
          s(r.End);
        }
      } else if (l.tag === r.Start) {
        var f = l[0];
        s(start((r => {
          if (r === e.Close && !i) {
            i = !0;
            a = !1;
            if (n) {
              clearTimeout(n);
            }
            f(e.Close);
          } else if (!i) {
            f(e.Pull);
          }
        })));
      } else {
        if (n) {
          clearTimeout(n);
        }
        n = setTimeout((() => {
          n = void 0;
          s(l);
          if (a) {
            s(r.End);
          }
        }), t(l[0]));
      }
    }));
  };
};

exports.delay = function delay(e) {
  return t => l => {
    var s = 0;
    t((t => {
      if (t !== r.End && t.tag === r.Start) {
        l(t);
      } else {
        s++;
        setTimeout((() => {
          if (s) {
            s--;
            l(t);
          }
        }), e);
      }
    }));
  };
};

exports.empty = t => {
  var l = !1;
  t(start((s => {
    if (s === e.Close) {
      l = !0;
    } else if (!l) {
      l = !0;
      t(r.End);
    }
  })));
};

exports.filter = function filter(l) {
  return s => n => {
    var a = t;
    s((t => {
      if (t === r.End) {
        n(r.End);
      } else if (t.tag === r.Start) {
        a = t[0];
        n(t);
      } else if (!l(t[0])) {
        a(e.Pull);
      } else {
        n(t);
      }
    }));
  };
};

exports.flatten = mergeAll;

exports.forEach = function forEach(e) {
  return r => {
    subscribe(e)(r);
  };
};

exports.fromArray = l;

exports.fromAsyncIterable = fromAsyncIterable;

exports.fromCallbag = function fromCallbag(e) {
  return t => {
    e(0, ((e, l) => {
      if (0 === e) {
        t(start((e => {
          l(e + 1);
        })));
      } else if (1 === e) {
        t(push(l));
      } else {
        t(r.End);
      }
    }));
  };
};

exports.fromDomEvent = function fromDomEvent(e, r) {
  return make((t => {
    e.addEventListener(r, t.next);
    return () => e.removeEventListener(r, t.next);
  }));
};

exports.fromIterable = fromIterable;

exports.fromObservable = function fromObservable(t) {
  return l => {
    var s = (t[observableSymbol()] ? t[observableSymbol()]() : t).subscribe({
      next(e) {
        l(push(e));
      },
      complete() {
        l(r.End);
      },
      error(e) {
        throw e;
      }
    });
    l(start((r => {
      if (r === e.Close) {
        s.unsubscribe();
      }
    })));
  };
};

exports.fromPromise = function fromPromise(e) {
  return make((r => {
    e.then((e => {
      Promise.resolve(e).then((() => {
        r.next(e);
        r.complete();
      }));
    }));
    return teardownPlaceholder;
  }));
};

exports.fromValue = function fromValue(t) {
  return l => {
    var s = !1;
    l(start((n => {
      if (n === e.Close) {
        s = !0;
      } else if (!s) {
        s = !0;
        l(push(t));
        l(r.End);
      }
    })));
  };
};

exports.interval = function interval(e) {
  return make((r => {
    var t = 0;
    var l = setInterval((() => r.next(t++)), e);
    return () => clearInterval(l);
  }));
};

exports.lazy = function lazy(e) {
  return r => e()(r);
};

exports.make = make;

exports.makeSubject = function makeSubject() {
  var e;
  var r;
  return {
    source: share(make((t => {
      e = t.next;
      r = t.complete;
      return teardownPlaceholder;
    }))),
    next(r) {
      if (e) {
        e(r);
      }
    },
    complete() {
      if (r) {
        r();
      }
    }
  };
};

exports.map = function map(e) {
  return t => l => t((t => {
    if (t === r.End || t.tag === r.Start) {
      l(t);
    } else {
      l(push(e(t[0])));
    }
  }));
};

exports.merge = function merge(e) {
  return mergeAll(l(e));
};

exports.mergeAll = mergeAll;

exports.mergeMap = mergeMap;

exports.never = e => {
  e(start(t));
};

exports.onEnd = function onEnd(t) {
  return l => s => {
    var n = !1;
    l((l => {
      if (n) {} else if (l === r.End) {
        n = !0;
        s(r.End);
        t();
      } else if (l.tag === r.Start) {
        var a = l[0];
        s(start((r => {
          if (r === e.Close) {
            n = !0;
            a(e.Close);
            t();
          } else {
            a(r);
          }
        })));
      } else {
        s(l);
      }
    }));
  };
};

exports.onPush = onPush;

exports.onStart = function onStart(e) {
  return t => l => t((t => {
    if (t === r.End) {
      l(r.End);
    } else if (t.tag === r.Start) {
      l(t);
      e();
    } else {
      l(t);
    }
  }));
};

exports.pipe = (...e) => {
  var r = e[0];
  for (var t = 1, l = e.length; t < l; t++) {
    r = e[t](r);
  }
  return r;
};

exports.publish = function publish(e) {
  subscribe((e => {}))(e);
};

exports.sample = function sample(l) {
  return s => n => {
    var a = t;
    var i = t;
    var f;
    var o = !1;
    var u = !1;
    s((t => {
      if (u) {} else if (t === r.End) {
        u = !0;
        i(e.Close);
        n(r.End);
      } else if (t.tag === r.Start) {
        a = t[0];
      } else {
        f = t[0];
        if (!o) {
          o = !0;
          i(e.Pull);
          a(e.Pull);
        } else {
          o = !1;
        }
      }
    }));
    l((t => {
      if (u) {} else if (t === r.End) {
        u = !0;
        a(e.Close);
        n(r.End);
      } else if (t.tag === r.Start) {
        i = t[0];
      } else if (void 0 !== f) {
        var l = push(f);
        f = void 0;
        n(l);
      }
    }));
    n(start((r => {
      if (r === e.Close && !u) {
        u = !0;
        a(e.Close);
        i(e.Close);
      } else if (!u && !o) {
        o = !0;
        a(e.Pull);
        i(e.Pull);
      }
    })));
  };
};

exports.scan = function scan(e, t) {
  return l => s => {
    var n = t;
    l((t => {
      if (t === r.End) {
        s(r.End);
      } else if (t.tag === r.Start) {
        s(t);
      } else {
        s(push(n = e(n, t[0])));
      }
    }));
  };
};

exports.share = share;

exports.skip = function skip(l) {
  return s => n => {
    var a = t;
    var i = l;
    s((t => {
      if (t === r.End) {
        n(r.End);
      } else if (t.tag === r.Start) {
        a = t[0];
        n(t);
      } else if (i-- > 0) {
        a(e.Pull);
      } else {
        n(t);
      }
    }));
  };
};

exports.skipUntil = function skipUntil(l) {
  return s => n => {
    var a = t;
    var i = t;
    var f = !0;
    var o = !1;
    var u = !1;
    s((t => {
      if (u) {} else if (t === r.End) {
        u = !0;
        if (f) {
          i(e.Close);
        }
        n(r.End);
      } else if (t.tag === r.Start) {
        a = t[0];
        l((t => {
          if (t === r.End) {
            if (f) {
              u = !0;
              a(e.Close);
            }
          } else if (t.tag === r.Start) {
            (i = t[0])(e.Pull);
          } else {
            f = !1;
            i(e.Close);
          }
        }));
      } else if (!f) {
        o = !1;
        n(t);
      } else if (!o) {
        o = !0;
        a(e.Pull);
        i(e.Pull);
      } else {
        o = !1;
      }
    }));
    n(start((r => {
      if (r === e.Close && !u) {
        u = !0;
        a(e.Close);
        if (f) {
          i(e.Close);
        }
      } else if (!u && !o) {
        o = !0;
        if (f) {
          i(e.Pull);
        }
        a(e.Pull);
      }
    })));
  };
};

exports.skipWhile = function skipWhile(l) {
  return s => n => {
    var a = t;
    var i = !0;
    s((t => {
      if (t === r.End) {
        n(r.End);
      } else if (t.tag === r.Start) {
        a = t[0];
        n(t);
      } else if (i) {
        if (l(t[0])) {
          a(e.Pull);
        } else {
          i = !1;
          n(t);
        }
      } else {
        n(t);
      }
    }));
  };
};

exports.subscribe = subscribe;

exports.switchAll = function switchAll(e) {
  return switchMap(identity)(e);
};

exports.switchMap = switchMap;

exports.take = function take(l) {
  return s => n => {
    var a = t;
    var i = !1;
    var f = 0;
    s((t => {
      if (i) {} else if (t === r.End) {
        i = !0;
        n(r.End);
      } else if (t.tag === r.Start) {
        if (l <= 0) {
          i = !0;
          n(r.End);
          t[0](e.Close);
        } else {
          a = t[0];
        }
      } else if (f++ < l) {
        n(t);
        if (!i && f >= l) {
          i = !0;
          n(r.End);
          a(e.Close);
        }
      } else {
        n(t);
      }
    }));
    n(start((r => {
      if (r === e.Close && !i) {
        i = !0;
        a(e.Close);
      } else if (r === e.Pull && !i && f < l) {
        a(e.Pull);
      }
    })));
  };
};

exports.takeLast = function takeLast(s) {
  return n => a => {
    var i = [];
    var f = t;
    n((t => {
      if (t === r.End) {
        l(i)(a);
      } else if (t.tag === r.Start) {
        if (s <= 0) {
          t[0](e.Close);
          l(i)(a);
        } else {
          (f = t[0])(e.Pull);
        }
      } else {
        if (i.length >= s && s) {
          i.shift();
        }
        i.push(t[0]);
        f(e.Pull);
      }
    }));
  };
};

exports.takeUntil = function takeUntil(l) {
  return s => n => {
    var a = t;
    var i = t;
    var f = !1;
    s((t => {
      if (f) {} else if (t === r.End) {
        f = !0;
        i(e.Close);
        n(r.End);
      } else if (t.tag === r.Start) {
        a = t[0];
        l((t => {
          if (t === r.End) {} else if (t.tag === r.Start) {
            (i = t[0])(e.Pull);
          } else {
            f = !0;
            i(e.Close);
            a(e.Close);
            n(r.End);
          }
        }));
      } else {
        n(t);
      }
    }));
    n(start((r => {
      if (r === e.Close && !f) {
        f = !0;
        a(e.Close);
        i(e.Close);
      } else if (!f) {
        a(e.Pull);
      }
    })));
  };
};

exports.takeWhile = function takeWhile(l) {
  return s => n => {
    var a = t;
    var i = !1;
    s((t => {
      if (i) {} else if (t === r.End) {
        i = !0;
        n(r.End);
      } else if (t.tag === r.Start) {
        a = t[0];
        n(t);
      } else if (!l(t[0])) {
        i = !0;
        n(r.End);
        a(e.Close);
      } else {
        n(t);
      }
    }));
  };
};

exports.tap = onPush;

exports.throttle = function throttle(t) {
  return l => s => {
    var n = !1;
    var a;
    l((l => {
      if (l === r.End) {
        if (a) {
          clearTimeout(a);
        }
        s(r.End);
      } else if (l.tag === r.Start) {
        var i = l[0];
        s(start((r => {
          if (r === e.Close) {
            if (a) {
              clearTimeout(a);
            }
            i(e.Close);
          } else {
            i(e.Pull);
          }
        })));
      } else if (!n) {
        n = !0;
        if (a) {
          clearTimeout(a);
        }
        a = setTimeout((() => {
          a = void 0;
          n = !1;
        }), t(l[0]));
        s(l);
      }
    }));
  };
};

exports.toArray = function toArray(l) {
  var s = [];
  var n = t;
  var a = !1;
  l((t => {
    if (t === r.End) {
      a = !0;
    } else if (t.tag === r.Start) {
      (n = t[0])(e.Pull);
    } else {
      s.push(t[0]);
      n(e.Pull);
    }
  }));
  if (!a) {
    n(e.Close);
  }
  return s;
};

exports.toAsyncIterable = l => ({
  [Symbol.asyncIterator]() {
    var n = [];
    var a = !1;
    var i = t;
    var f;
    l((t => {
      if (a) {} else if (t === r.End) {
        if (f) {
          f = f(s);
        }
        a = !0;
      } else if (t.tag === r.Start) {
        (i = t[0])(e.Pull);
      } else if (f) {
        f = f({
          value: t[0],
          done: !1
        });
      } else {
        n.push(t[0]);
      }
    }));
    return {
      async next() {
        if (a && !n.length) {
          return s;
        } else if (!a && n.length <= 1) {
          i(e.Pull);
        }
        return n.length ? {
          value: n.shift(),
          done: !1
        } : new Promise((e => f = e));
      },
      async return() {
        if (!a) {
          f = i(e.Close);
        }
        a = !0;
        return s;
      }
    };
  }
});

exports.toCallbag = function toCallbag(e) {
  return (t, l) => {
    if (0 === t) {
      e((e => {
        if (e === r.End) {
          l(2);
        } else if (e.tag === r.Start) {
          l(0, (r => {
            if (r < 3) {
              e[0](r - 1);
            }
          }));
        } else {
          l(1, e[0]);
        }
      }));
    }
  };
};

exports.toObservable = function toObservable(l) {
  return {
    subscribe(s, n, a) {
      var i = "object" == typeof s ? s : {
        next: s,
        error: n,
        complete: a
      };
      var f = t;
      var o = !1;
      l((t => {
        if (o) {} else if (t === r.End) {
          o = !0;
          if (i.complete) {
            i.complete();
          }
        } else if (t.tag === r.Start) {
          (f = t[0])(e.Pull);
        } else {
          i.next(t[0]);
          f(e.Pull);
        }
      }));
      var u = {
        closed: !1,
        unsubscribe() {
          u.closed = !0;
          o = !0;
          f(e.Close);
        }
      };
      return u;
    },
    [observableSymbol()]() {
      return this;
    }
  };
};

exports.toPromise = function toPromise(l) {
  return new Promise((s => {
    var n = t;
    var a;
    l((t => {
      if (t === r.End) {
        Promise.resolve(a).then(s);
      } else if (t.tag === r.Start) {
        (n = t[0])(e.Pull);
      } else {
        a = t[0];
        n(e.Pull);
      }
    }));
  }));
};

exports.zip = zip;
//# sourceMappingURL=wonka.js.map
