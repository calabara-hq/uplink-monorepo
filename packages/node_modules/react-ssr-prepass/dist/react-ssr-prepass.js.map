{"version":3,"file":"react-ssr-prepass.js","sources":["../src/symbols.js","../src/element.js","../src/internals/context.js","../src/internals/error.js","../src/internals/state.js","../src/internals/objectIs.js","../src/internals/dispatcher.js","../src/render/lazyComponent.js","../src/render/functionComponent.js","../src/render/classComponent.js","../src/visitor.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport type { Node } from 'react'\n\nlet Element = 0xeac7\nlet Portal = 0xeaca\nlet Fragment = 0xeacb\nlet StrictMode = 0xeacc\nlet Profiler = 0xead2\nlet ContextProvider = 0xeacd\nlet ContextConsumer = 0xeace\nlet ConcurrentMode = 0xeacf\nlet ForwardRef = 0xead0\nlet Suspense = 0xead1\nlet Memo = 0xead3\nlet Lazy = 0xead4\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for\n  Element = symbolFor('react.element')\n  Portal = symbolFor('react.portal')\n  Fragment = symbolFor('react.fragment')\n  StrictMode = symbolFor('react.strict_mode')\n  Profiler = symbolFor('react.profiler')\n  ContextProvider = symbolFor('react.provider')\n  ContextConsumer = symbolFor('react.context')\n  ConcurrentMode = Symbol.for('react.concurrent_mode')\n  ForwardRef = symbolFor('react.forward_ref')\n  Suspense = symbolFor('react.suspense')\n  Memo = symbolFor('react.memo')\n  Lazy = symbolFor('react.lazy')\n}\n\n/** Literal types representing the ReactSymbol values. These values do not actually match the values from react-is! */\nexport type ReactSymbol =\n  | 'react.element' /* 0xeac7 | Symbol(react.element) */\n  | 'react.portal' /* 0xeaca | Symbol(react.portal) */\n  | 'react.fragment' /* 0xeacb | Symbol(react.fragment) */\n  | 'react.strict_mode' /* 0xeacc | Symbol(react.strict_mode) */\n  | 'react.profiler' /* 0xead2 | Symbol(react.profiler) */\n  | 'react.provider' /* 0xeacd | Symbol(react.provider) */\n  | 'react.context' /* 0xeace | Symbol(react.context) */\n  | 'react.concurrent_mode' /* 0xeacf | Symbol(react.concurrent_mode) */\n  | 'react.forward_ref' /* 0xead0 | Symbol(react.forward_ref) */\n  | 'react.suspense' /* 0xead1 | Symbol(react.suspense) */\n  | 'react.memo' /* 0xead3 | Symbol(react.memo) */\n  | 'react.lazy' /* 0xead4 | Symbol(react.lazy) */\n\nexport const REACT_ELEMENT_TYPE: 'react.element' = (Element: any)\nexport const REACT_PORTAL_TYPE: 'react.portal' = (Portal: any)\nexport const REACT_FRAGMENT_TYPE: 'react.fragment' = (Fragment: any)\nexport const REACT_STRICT_MODE_TYPE: 'react.strict_mode' = (StrictMode: any)\nexport const REACT_PROFILER_TYPE: 'react.profiler' = (Profiler: any)\nexport const REACT_PROVIDER_TYPE: 'react.provider' = (ContextProvider: any)\nexport const REACT_CONTEXT_TYPE: 'react.context' = (ContextConsumer: any)\nexport const REACT_CONCURRENT_MODE_TYPE: 'react.concurrent_mode' = (ConcurrentMode: any)\nexport const REACT_FORWARD_REF_TYPE: 'react.forward_ref' = (ForwardRef: any)\nexport const REACT_SUSPENSE_TYPE: 'react.suspense' = (Suspense: any)\nexport const REACT_MEMO_TYPE: 'react.memo' = (Memo: any)\nexport const REACT_LAZY_TYPE: 'react.lazy' = (Lazy: any)\n","// @flow\n\nimport { Children, type Node, type Element, type ComponentType } from 'react'\nimport type { AbstractContext, AbstractElement } from './types'\n\nimport {\n  type ReactSymbol,\n  REACT_ELEMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_CONCURRENT_MODE_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE\n} from './symbols'\n\n/** Is a given Component a class component */\nexport const shouldConstruct = (Comp: ComponentType<*>): boolean %checks =>\n  (Comp: any).prototype && (Comp: any).prototype.isReactComponent\n\n/** Determine the type of element using react-is with applied fixes */\nexport const typeOf = (x: AbstractElement): ReactSymbol | void => {\n  switch (x.$$typeof) {\n    case REACT_PORTAL_TYPE:\n      return REACT_PORTAL_TYPE\n    case REACT_ELEMENT_TYPE:\n      switch (x.type) {\n        case REACT_CONCURRENT_MODE_TYPE:\n          return REACT_CONCURRENT_MODE_TYPE\n        case REACT_FRAGMENT_TYPE:\n          return REACT_FRAGMENT_TYPE\n        case REACT_PROFILER_TYPE:\n          return REACT_PROFILER_TYPE\n        case REACT_STRICT_MODE_TYPE:\n          return REACT_STRICT_MODE_TYPE\n        case REACT_SUSPENSE_TYPE:\n          return REACT_SUSPENSE_TYPE\n\n        default: {\n          switch (x.type && ((x.type: any).$$typeof: ReactSymbol)) {\n            case REACT_LAZY_TYPE:\n              return REACT_LAZY_TYPE\n            case REACT_MEMO_TYPE:\n              return REACT_MEMO_TYPE\n            case REACT_CONTEXT_TYPE:\n              return REACT_CONTEXT_TYPE\n            case REACT_PROVIDER_TYPE:\n              return REACT_PROVIDER_TYPE\n            case REACT_FORWARD_REF_TYPE:\n              return REACT_FORWARD_REF_TYPE\n            default:\n              return REACT_ELEMENT_TYPE\n          }\n        }\n      }\n\n    default:\n      return undefined\n  }\n}\n\ntype ScalarNode = null | boolean | string | number\n\n/** Rebound Children.toArray with modified AbstractElement types */\nconst toArray: (node?: Node) => Array<ScalarNode | AbstractElement> =\n  Children.toArray\n\n/** Checks whether the `node` is an AbstractElement */\nconst isAbstractElement = (\n  node: ScalarNode | AbstractElement\n): boolean %checks => node !== null && typeof node === 'object'\n\n/** Returns a flat AbstractElement array for a given AbstractElement node */\nexport const getChildrenArray = (node?: Node): AbstractElement[] => {\n  // $FlowFixMe\n  return toArray(node).filter(isAbstractElement)\n}\n\n/** Returns merged props given a props and defaultProps object */\nexport const computeProps = (props: Object, defaultProps: void | Object) => {\n  return typeof defaultProps === 'object'\n    ? Object.assign({}, defaultProps, props)\n    : props\n}\n","// @flow\n\nimport type {\n  AbstractContext,\n  UserElement,\n  ContextMap,\n  ContextStore,\n  ContextEntry\n} from '../types'\n\n/** The context is kept as a Map from a Context value to the current\n   value on the React element tree.\n   The legacy context is kept as a simple object.\n   When the tree is being walked modifications are made by assigning\n   new legacy context maps or new context values.\n   These changes are kept in the `prev` variables and must be flushed\n   before continuing to walk the tree.\n   After walking the children they can be restored.\n   This way the context recursively restores itself on the way up. */\n\nlet currentContextStore: ContextStore = new Map()\nlet currentContextMap: ContextMap = {}\n\nlet prevContextMap: void | ContextMap = undefined\nlet prevContextEntry: void | ContextEntry = undefined\n\nexport const getCurrentContextMap = (): ContextMap =>\n  Object.assign({}, currentContextMap)\nexport const getCurrentContextStore = (): ContextStore =>\n  new Map(currentContextStore)\n\nexport const flushPrevContextMap = (): void | ContextMap => {\n  const prev = prevContextMap\n  prevContextMap = undefined\n  return prev\n}\n\nexport const flushPrevContextStore = (): void | ContextEntry => {\n  const prev = prevContextEntry\n  prevContextEntry = undefined\n  return prev\n}\n\nexport const restoreContextMap = (prev: void | ContextMap) => {\n  if (prev !== undefined) {\n    Object.assign(currentContextMap, prev)\n  }\n}\n\nexport const restoreContextStore = (prev: void | ContextEntry) => {\n  if (prev !== undefined) {\n    currentContextStore.set(prev[0], prev[1])\n  }\n}\n\nexport const setCurrentContextMap = (map: ContextMap) => {\n  prevContextMap = undefined\n  currentContextMap = map\n}\n\nexport const setCurrentContextStore = (store: ContextStore) => {\n  prevContextEntry = undefined\n  currentContextStore = store\n}\n\nexport const assignContextMap = (map: ContextMap) => {\n  prevContextMap = {}\n  for (const name in map) {\n    prevContextMap[name] = currentContextMap[name]\n    currentContextMap[name] = map[name]\n  }\n}\n\nexport const setContextValue = (context: AbstractContext, value: mixed) => {\n  prevContextEntry = [context, currentContextStore.get(context)]\n  currentContextStore.set(context, value)\n}\n\nexport const readContextValue = (context: AbstractContext) => {\n  const value = currentContextStore.get(context)\n  if (value !== undefined) {\n    return value\n  }\n\n  // Return default if context has no value yet\n  return context._currentValue\n}\n\nconst emptyContext = {}\n\nexport const maskContext = (type: $PropertyType<UserElement, 'type'>) => {\n  const { contextType, contextTypes } = type\n\n  if (contextType) {\n    return readContextValue(contextType)\n  } else if (!contextTypes) {\n    return emptyContext\n  }\n\n  const maskedContext = {}\n  for (const name in contextTypes) {\n    maskedContext[name] = currentContextMap[name]\n  }\n\n  return maskedContext\n}\n","// @flow\n\nimport type { ClassFrame } from '../types'\n\n/** The current error boundary frame determines where to continue rendering when an error is raised */\nlet currentErrorFrame: null | ClassFrame = null\n\nexport const getCurrentErrorFrame = (): ClassFrame | null => currentErrorFrame\n\nexport const setCurrentErrorFrame = (frame?: ClassFrame | null) => {\n  currentErrorFrame = frame || null\n}\n","// @flow\n\nimport type { RendererState } from '../types'\n\n/** The current global renderer state per render cycle */\nexport const rendererStateRef: {| current: RendererState |} = {\n  current: { uniqueID: 0 }\n}\nexport const initRendererState = (): RendererState =>\n  (rendererStateRef.current = { uniqueID: 0 })\nexport const setCurrentRendererState = (state: RendererState) =>\n  (rendererStateRef.current = state)\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  )\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is\n\nexport default objectIs\n","// @flow\n// Source: https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js\n\nimport { readContextValue } from './context'\nimport { rendererStateRef } from './state'\nimport is from './objectIs'\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  AbstractContext,\n  BasicStateAction,\n  Dispatch,\n  Update,\n  UpdateQueue,\n  Hook\n} from '../types'\n\nexport opaque type Identity = {}\nexport opaque type OpaqueIDType = string\n\nlet currentIdentity: Identity | null = null\n\nexport const makeIdentity = (): Identity => ({})\n\nexport const setCurrentIdentity = (id: Identity | null) => {\n  currentIdentity = id\n}\n\nexport const getCurrentIdentity = (): Identity => {\n  if (currentIdentity === null) {\n    throw new Error(\n      '[react-ssr-prepass] Hooks can only be called inside the body of a function component. ' +\n        '(https://fb.me/react-invalid-hook-call)'\n    )\n  }\n\n  // NOTE: The warning that is used in ReactPartialRendererHooks is obsolete\n  // in a prepass, since it'll be caught by a subsequent renderer anyway\n  // https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L63-L71\n\n  return (currentIdentity: Identity)\n}\n\nlet firstWorkInProgressHook: Hook | null = null\nlet workInProgressHook: Hook | null = null\n// Whether an update was scheduled during the currently executing render pass.\nlet didScheduleRenderPhaseUpdate: boolean = false\n// Lazily created map of render-phase updates\nlet renderPhaseUpdates: Map<UpdateQueue<any>, Update<any>> | null = null\n// Counter to prevent infinite loops.\nlet numberOfReRenders: number = 0\nconst RE_RENDER_LIMIT = 25\n\nexport const getFirstHook = (): Hook | null => firstWorkInProgressHook\n\nexport const setFirstHook = (hook: Hook | null) => {\n  firstWorkInProgressHook = hook\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null\n) {\n  // NOTE: The warnings that are used in ReactPartialRendererHooks are obsolete\n  // in a prepass, since these issues will be caught by a subsequent renderer anyway\n  if (prevDeps === null) return false\n\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (!is(nextDeps[i], prevDeps[i])) return false\n  }\n\n  return true\n}\n\nfunction createHook(): Hook {\n  return {\n    memoizedState: null,\n    queue: null,\n    next: null\n  }\n}\n\nfunction createWorkInProgressHook(): Hook {\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    if (firstWorkInProgressHook === null) {\n      return (firstWorkInProgressHook = workInProgressHook = createHook())\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      return (workInProgressHook = firstWorkInProgressHook)\n    }\n  } else {\n    if (workInProgressHook.next === null) {\n      // Append to the end of the list\n      return (workInProgressHook = workInProgressHook.next = createHook())\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      return (workInProgressHook = workInProgressHook.next)\n    }\n  }\n}\n\nexport function renderWithHooks(\n  Component: any,\n  props: any,\n  refOrContext: any\n): any {\n  workInProgressHook = null\n  let children = Component(props, refOrContext)\n\n  // NOTE: Excessive rerenders won't throw but will instead abort rendering\n  // since a subsequent renderer can throw when this issue occurs instead\n  while (numberOfReRenders < RE_RENDER_LIMIT && didScheduleRenderPhaseUpdate) {\n    // Updates were scheduled during the render phase. They are stored in\n    // the `renderPhaseUpdates` map. Call the component again, reusing the\n    // work-in-progress hooks and applying the additional updates on top. Keep\n    // restarting until no more updates are scheduled.\n    didScheduleRenderPhaseUpdate = false\n    numberOfReRenders += 1\n    // Start over from the beginning of the list\n    workInProgressHook = null\n    children = Component(props, refOrContext)\n  }\n\n  // This will be reset by renderer\n  // firstWorkInProgressHook = null\n\n  numberOfReRenders = 0\n  renderPhaseUpdates = null\n  workInProgressHook = null\n\n  return children\n}\n\nfunction readContext(context: AbstractContext, _: void | number | boolean) {\n  // NOTE: The warning that is used in ReactPartialRendererHooks is obsolete\n  // in a prepass, since it'll be caught by a subsequent renderer anyway\n  // https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L215-L223\n  return readContextValue(context)\n}\n\nfunction useContext(context: AbstractContext, _: void | number | boolean) {\n  getCurrentIdentity()\n  return readContextValue(context)\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe\n  return typeof action === 'function' ? action(state) : action\n}\n\nfunction useState<S>(\n  initialState: (() => S) | S\n): [S, Dispatch<BasicStateAction<S>>] {\n  return useReducer(\n    basicStateReducer,\n    // useReducer has a special case to support lazy useState initializers\n    (initialState: any)\n  )\n}\n\nfunction useReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: (I) => S\n): [S, Dispatch<A>] {\n  const id = getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n\n  // In the case of a re-render after a suspense, the initial state\n  // may not be set, so instead of initialising if `!isRerender`, we\n  // check whether `queue` is set\n  if (workInProgressHook.queue === null) {\n    let initialState\n    if (reducer === basicStateReducer) {\n      // Special case for `useState`.\n      initialState =\n        typeof initialArg === 'function'\n          ? ((initialArg: any): () => S)()\n          : ((initialArg: any): S)\n    } else {\n      initialState =\n        init !== undefined ? init(initialArg) : ((initialArg: any): S)\n    }\n\n    workInProgressHook.memoizedState = initialState\n  }\n\n  const queue: UpdateQueue<A> =\n    workInProgressHook.queue ||\n    (workInProgressHook.queue = { last: null, dispatch: null })\n  const dispatch: Dispatch<A> =\n    queue.dispatch || (queue.dispatch = dispatchAction.bind(null, id, queue))\n\n  if (renderPhaseUpdates !== null) {\n    // This is a re-render. Apply the new render phase updates to the previous\n    // current hook.\n    // Render phase updates are stored in a map of queue -> linked list\n    const firstRenderPhaseUpdate = renderPhaseUpdates.get(queue)\n    if (firstRenderPhaseUpdate !== undefined) {\n      renderPhaseUpdates.delete(queue)\n      let newState = workInProgressHook.memoizedState\n      let update = firstRenderPhaseUpdate\n      do {\n        // Process this render phase update. We don't have to check the\n        // priority because it will always be the same as the current\n        // render's.\n        const action = update.action\n        newState = reducer(newState, action)\n        update = update.next\n      } while (update !== null)\n\n      workInProgressHook.memoizedState = newState\n    }\n  }\n\n  return [workInProgressHook.memoizedState, dispatch]\n}\n\nfunction useMemo<T>(nextCreate: () => T, deps: Array<mixed> | void | null): T {\n  getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n\n  const nextDeps = deps === undefined ? null : deps\n  const prevState = workInProgressHook.memoizedState\n  if (prevState !== null && nextDeps !== null) {\n    const prevDeps = prevState[1]\n    if (areHookInputsEqual(nextDeps, prevDeps)) {\n      return prevState[0]\n    }\n  }\n\n  const nextValue = nextCreate()\n  workInProgressHook.memoizedState = [nextValue, nextDeps]\n  return nextValue\n}\n\nfunction useRef<T>(initialValue: T): { current: T } {\n  getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n  const previousRef = workInProgressHook.memoizedState\n  if (previousRef === null) {\n    const ref = { current: initialValue }\n    workInProgressHook.memoizedState = ref\n    return ref\n  } else {\n    return previousRef\n  }\n}\n\nfunction useOpaqueIdentifier(): OpaqueIDType {\n  getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n  if (!workInProgressHook.memoizedState)\n    workInProgressHook.memoizedState =\n      'R:' + (rendererStateRef.current.uniqueID++).toString(36)\n  return workInProgressHook.memoizedState\n}\n\nfunction dispatchAction<A>(\n  componentIdentity: Identity,\n  queue: UpdateQueue<A>,\n  action: A\n) {\n  if (componentIdentity === currentIdentity) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdate = true\n    const update: Update<A> = {\n      action,\n      next: null\n    }\n    if (renderPhaseUpdates === null) {\n      renderPhaseUpdates = new Map()\n    }\n    const firstRenderPhaseUpdate = renderPhaseUpdates.get(queue)\n    if (firstRenderPhaseUpdate === undefined) {\n      renderPhaseUpdates.set(queue, update)\n    } else {\n      // Append the update to the end of the list.\n      let lastRenderPhaseUpdate = firstRenderPhaseUpdate\n      while (lastRenderPhaseUpdate.next !== null) {\n        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next\n      }\n      lastRenderPhaseUpdate.next = update\n    }\n  } else {\n    // This means an update has happened after the function component has\n    // returned. On the server this is a no-op. In React Fiber, the update\n    // would be scheduled for a future render.\n  }\n}\n\nfunction useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  return useMemo(() => callback, deps)\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  _subscribe: MutableSourceSubscribeFn<Source, Snapshot>\n): Snapshot {\n  getCurrentIdentity()\n  return getSnapshot(source._source)\n}\n\nfunction noop(): void {}\n\nfunction useTransition(): [(callback: () => void) => void, boolean] {\n  const startTransition = (callback) => {\n    callback()\n  }\n  return [startTransition, false]\n}\n\nfunction useDeferredValue<T>(input: T): T {\n  return input\n}\n\n// See: https://github.com/facebook/react/blob/fe41934/packages/use-sync-external-store/src/useSyncExternalStoreShimServer.js#L10-L20\nfunction useSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T\n): T {\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  return getSnapshot()\n}\n\nexport const Dispatcher = {\n  readContext,\n  useSyncExternalStore,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n  useCallback,\n  useMutableSource,\n  useTransition,\n  useDeferredValue,\n  useOpaqueIdentifier,\n  // aliased for now\n  // see: https://github.com/FormidableLabs/react-ssr-prepass/pull/75\n  useId: useOpaqueIdentifier,\n  unstable_useId: useOpaqueIdentifier,\n  unstable_useOpaqueIdentifier: useOpaqueIdentifier,\n  // ignore useLayout effect completely as usage of it will be caught\n  // in a subsequent render pass\n  useLayoutEffect: noop,\n  // useImperativeHandle is not run in the server environment\n  useImperativeHandle: noop,\n  // Effects are not run in the server environment.\n  useEffect: noop,\n  // Debugging effect\n  useDebugValue: noop\n}\n","// @flow\n\nimport { createElement, type Node } from 'react'\nimport type {\n  LazyComponent,\n  LazyComponentPayload,\n  DefaultProps,\n  LazyFrame,\n  Frame\n} from '../types'\nimport { getChildrenArray } from '../element'\n\nimport {\n  setCurrentIdentity,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame\n} from '../internals'\n\nconst resolve = (type: LazyComponent): Promise<void> => {\n  const payload = (type._payload || type: any)\n  if (payload._status === 0) {\n    return payload._result\n  } else if (payload._status === 1) {\n    return Promise.resolve(payload._result)\n  } else if (payload._status === 2) {\n    return Promise.reject(payload._result)\n  }\n\n  payload._status = 0 /* PENDING */\n\n  return (payload._result = (payload._ctor || payload._result)()\n    .then((Component) => {\n      payload._result = Component\n      if (typeof Component === 'function') {\n        payload._status = 1 /* SUCCESSFUL */\n      } else if (\n        Component !== null &&\n        typeof Component === 'object' &&\n        typeof Component.default === 'function'\n      ) {\n        payload._result = Component.default\n        payload._status = 1 /* SUCCESSFUL */\n      } else {\n        payload._status = 2 /* FAILED */\n      }\n    })\n    .catch((error) => {\n      payload._status = 2 /* FAILED */\n      payload._result = error\n      return Promise.reject(error)\n    }))\n}\n\nconst render = (\n  type: LazyComponent,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  // Component has previously been fetched successfully,\n  // so create the element with passed props and return it\n  const payload = ((type._payload || type: any): LazyComponentPayload)\n  if (payload._status === 1) {\n    return createElement(payload._result, props)\n  }\n\n  return null\n}\n\nexport const mount = (\n  type: LazyComponent,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  // If the component has not been fetched yet, suspend this component\n  const payload = ((type._payload || type: any): LazyComponentPayload)\n  if (payload._status <= 0) {\n    queue.push({\n      kind: 'frame.lazy',\n      contextMap: getCurrentContextMap(),\n      contextStore: getCurrentContextStore(),\n      errorFrame: getCurrentErrorFrame(),\n      thenable: resolve(type),\n      props,\n      type\n    })\n\n    return null\n  }\n\n  return render(type, props, queue)\n}\n\nexport const update = (queue: Frame[], frame: LazyFrame): Node => {\n  setCurrentIdentity(null)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  setCurrentErrorFrame(frame.errorFrame)\n  return render(frame.type, frame.props, queue)\n}\n","// @flow\n\nimport type { Node, ComponentType } from 'react'\nimport { computeProps } from '../element'\n\nimport type {\n  Visitor,\n  Hook,\n  Frame,\n  HooksFrame,\n  DefaultProps,\n  ComponentStatics,\n  UserElement\n} from '../types'\n\nimport {\n  type Identity,\n  maskContext,\n  makeIdentity,\n  setCurrentIdentity,\n  getCurrentIdentity,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame,\n  renderWithHooks,\n  setFirstHook,\n  getFirstHook\n} from '../internals'\n\nconst makeFrame = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  thenable: Promise<any>\n) => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  id: getCurrentIdentity(),\n  hook: getFirstHook(),\n  kind: 'frame.hooks',\n  errorFrame: getCurrentErrorFrame(),\n  thenable,\n  props,\n  type\n})\n\nconst render = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  try {\n    return renderWithHooks(\n      type,\n      computeProps(props, type.defaultProps),\n      maskContext(type)\n    )\n  } catch (error) {\n    if (typeof error.then !== 'function') {\n      throw error\n    }\n\n    queue.push(makeFrame(type, props, error))\n    return null\n  }\n}\n\n/** Mount a function component */\nexport const mount = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n): Node => {\n  setFirstHook(null)\n  setCurrentIdentity(makeIdentity())\n\n  const promise = visitor(element)\n  if (promise) {\n    queue.push(makeFrame(type, props, promise))\n    return null\n  }\n\n  return render(type, props, queue)\n}\n\n/** Update a previously suspended function component */\nexport const update = (queue: Frame[], frame: HooksFrame) => {\n  setFirstHook(frame.hook)\n  setCurrentIdentity(frame.id)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  setCurrentErrorFrame(frame.errorFrame)\n  return render(frame.type, frame.props, queue)\n}\n","// @flow\n\nimport type { Node, ComponentType } from 'react'\nimport { computeProps } from '../element'\n\nimport type {\n  Visitor,\n  Frame,\n  ClassFrame,\n  DefaultProps,\n  ComponentStatics,\n  UserElement\n} from '../types'\n\nimport {\n  maskContext,\n  assignContextMap,\n  setCurrentIdentity,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame\n} from '../internals'\n\nconst RE_RENDER_LIMIT = 25\n\nconst createUpdater = () => {\n  const queue = []\n\n  return {\n    _thrown: 0,\n    queue,\n    isMounted: () => false,\n    enqueueForceUpdate: () => null,\n    enqueueReplaceState: (instance, completeState) => {\n      if (instance._isMounted) {\n        queue.length = 0\n        queue.push(completeState)\n      }\n    },\n    enqueueSetState: (instance, currentPartialState) => {\n      if (instance._isMounted) {\n        queue.push(currentPartialState)\n      }\n    }\n  }\n}\n\nconst flushEnqueuedState = (instance: any) => {\n  const queue = (instance.updater.queue: any[])\n\n  if (queue.length > 0) {\n    let nextState = Object.assign({}, instance.state)\n\n    for (let i = 0, l = queue.length; i < l; i++) {\n      const partial = queue[i]\n      const partialState =\n        typeof partial === 'function'\n          ? partial.call(instance, nextState, instance.props, instance.context)\n          : partial\n      if (partialState !== null) {\n        Object.assign(nextState, partialState)\n      }\n    }\n\n    instance.state = nextState\n    queue.length = 0\n  }\n}\n\nconst createInstance = (type: any, props: DefaultProps) => {\n  const updater = createUpdater()\n  const computedProps = computeProps(props, type.defaultProps)\n  const context = maskContext(type)\n  const instance = new type(computedProps, context, updater)\n\n  instance.props = computedProps\n  instance.context = context\n  instance.updater = updater\n  instance._isMounted = true\n\n  if (instance.state === undefined) {\n    instance.state = null\n  }\n\n  if (\n    typeof instance.componentDidCatch === 'function' ||\n    typeof type.getDerivedStateFromError === 'function'\n  ) {\n    const frame = makeFrame(type, instance, null)\n    frame.errorFrame = frame\n    setCurrentErrorFrame(frame)\n  }\n\n  if (typeof type.getDerivedStateFromProps === 'function') {\n    const { getDerivedStateFromProps } = type\n    const state = getDerivedStateFromProps(instance.props, instance.state)\n    if (state !== null && state !== undefined) {\n      instance.state = Object.assign({}, instance.state, state)\n    }\n  } else if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount()\n  } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount()\n  }\n\n  return instance\n}\n\nconst makeFrame = (\n  type: any,\n  instance: any,\n  thenable: Promise<any> | null\n) => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  errorFrame: getCurrentErrorFrame(),\n  thenable,\n  kind: 'frame.class',\n  error: null,\n  instance,\n  type\n})\n\nconst render = (type: any, instance: any, queue: Frame[]) => {\n  // Flush all queued up state changes\n  flushEnqueuedState(instance)\n  let child: Node = null\n\n  try {\n    child = instance.render()\n  } catch (error) {\n    if (typeof error.then !== 'function') {\n      throw error\n    }\n\n    queue.push(makeFrame(type, instance, error))\n    return null\n  }\n\n  if (\n    type.childContextTypes !== undefined &&\n    typeof instance.getChildContext === 'function'\n  ) {\n    const childContext = instance.getChildContext()\n    if (childContext !== null && typeof childContext === 'object') {\n      assignContextMap(childContext)\n    }\n  }\n\n  if (\n    typeof instance.getDerivedStateFromProps !== 'function' &&\n    (typeof instance.componentWillMount === 'function' ||\n      typeof instance.UNSAFE_componentWillMount === 'function') &&\n    typeof instance.componentWillUnmount === 'function'\n  ) {\n    try {\n      instance.componentWillUnmount()\n    } catch (_err) {}\n  }\n\n  instance._isMounted = false\n  return child\n}\n\n/** Mount a class component */\nexport const mount = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n) => {\n  setCurrentIdentity(null)\n\n  const instance = createInstance(type, props)\n  const promise = visitor(element, instance)\n  if (promise) {\n    queue.push(makeFrame(type, instance, promise))\n    return null\n  }\n\n  return render(type, instance, queue)\n}\n\n/** Update a previously suspended class component */\nexport const update = (queue: Frame[], frame: ClassFrame) => {\n  setCurrentIdentity(null)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  setCurrentErrorFrame(frame.errorFrame)\n\n  if (frame.error) {\n    // We simply have to bail when a loop occurs\n    if (++frame.instance.updater._thrown >= RE_RENDER_LIMIT) return null\n\n    frame.instance._isMounted = true\n\n    if (typeof frame.instance.componentDidCatch === 'function') {\n      frame.instance.componentDidCatch(frame.error)\n    }\n\n    if (typeof frame.type.getDerivedStateFromError === 'function') {\n      frame.instance.updater.enqueueSetState(\n        frame.instance,\n        frame.type.getDerivedStateFromError(frame.error)\n      )\n    }\n  }\n\n  return render(frame.type, frame.instance, queue)\n}\n","// @flow\n\nimport React, { type Node, type ComponentType, createElement } from 'react'\n\nimport {\n  typeOf,\n  shouldConstruct,\n  getChildrenArray,\n  computeProps\n} from './element'\n\nimport {\n  mountFunctionComponent,\n  updateFunctionComponent,\n  mountClassComponent,\n  updateClassComponent,\n  mountLazyComponent,\n  updateLazyComponent\n} from './render'\n\nimport type {\n  Visitor,\n  YieldFrame,\n  ClassFrame,\n  Frame,\n  ContextMap,\n  ContextEntry,\n  DefaultProps,\n  ComponentStatics,\n  LazyElement,\n  AbstractElement,\n  ConsumerElement,\n  ProviderElement,\n  FragmentElement,\n  SuspenseElement,\n  ForwardRefElement,\n  MemoElement,\n  UserElement,\n  DOMElement\n} from './types'\n\nimport {\n  getCurrentContextMap,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  setCurrentContextStore,\n  flushPrevContextMap,\n  flushPrevContextStore,\n  restoreContextMap,\n  restoreContextStore,\n  readContextValue,\n  setContextValue,\n  setCurrentIdentity,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame,\n  Dispatcher\n} from './internals'\n\nimport {\n  REACT_ELEMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_CONCURRENT_MODE_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE\n} from './symbols'\n\nconst {\n  ReactCurrentDispatcher\n} = (React: any).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n\n// In the presence of setImmediate, i.e. on Node, we'll enable the\n// yielding behavior that gives the event loop a chance to continue\n// running when the prepasses would otherwise take too long\nexport const SHOULD_YIELD = typeof setImmediate === 'function'\n// Time in ms after which the otherwise synchronous visitor yields so that\n// the event loop is not interrupted for too long\nconst YIELD_AFTER_MS = 5\n\nconst render = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n) => {\n  return shouldConstruct(type)\n    ? mountClassComponent(type, props, queue, visitor, element)\n    : mountFunctionComponent(type, props, queue, visitor, element)\n}\n\nexport const visitElement = (\n  element: AbstractElement,\n  queue: Frame[],\n  visitor: Visitor\n): AbstractElement[] => {\n  switch (typeOf(element)) {\n    case REACT_SUSPENSE_TYPE:\n    case REACT_STRICT_MODE_TYPE:\n    case REACT_CONCURRENT_MODE_TYPE:\n    case REACT_PROFILER_TYPE:\n    case REACT_FRAGMENT_TYPE: {\n      // These element types are simply traversed over but otherwise ignored\n      const fragmentElement = ((element: any):\n        | FragmentElement\n        | SuspenseElement)\n      return getChildrenArray(fragmentElement.props.children)\n    }\n\n    case REACT_PROVIDER_TYPE: {\n      const providerElement = ((element: any): ProviderElement)\n      // Add provider's value prop to context\n      const { value, children } = providerElement.props\n      setContextValue(providerElement.type._context, value)\n\n      return getChildrenArray(children)\n    }\n\n    case REACT_CONTEXT_TYPE: {\n      const consumerElement = ((element: any): ConsumerElement)\n      const { children } = consumerElement.props\n\n      // Read from context and call children, if it's been passed\n      if (typeof children === 'function') {\n        const type = (consumerElement.type: any)\n        const context = typeof type._context === 'object' ? type._context : type\n        const value = readContextValue(context)\n        return getChildrenArray(children(value))\n      } else {\n        return []\n      }\n    }\n\n    case REACT_LAZY_TYPE: {\n      const lazyElement = ((element: any): LazyElement)\n      const type = lazyElement.type\n      const child = mountLazyComponent(type, lazyElement.props, queue)\n      return getChildrenArray(child)\n    }\n\n    case REACT_MEMO_TYPE: {\n      const memoElement = ((element: any): MemoElement)\n      const { type } = memoElement.type\n      const child = createElement((type: any), memoElement.props)\n      return getChildrenArray(child)\n    }\n\n    case REACT_FORWARD_REF_TYPE: {\n      const refElement = ((element: any): ForwardRefElement)\n      const { render: type, defaultProps } = refElement.type\n      const props = computeProps(refElement.props, defaultProps)\n      const child = createElement((type: any), props)\n      return getChildrenArray(child)\n    }\n\n    case REACT_ELEMENT_TYPE: {\n      const el = ((element: any): UserElement | DOMElement)\n      if (typeof el.type === 'string') {\n        // String elements can be skipped, so we just return children\n        return getChildrenArray(el.props.children)\n      } else {\n        const userElement = ((element: any): UserElement)\n        const { type, props } = userElement\n        const child = render(type, props, queue, visitor, userElement)\n        return getChildrenArray(child)\n      }\n    }\n\n    case REACT_PORTAL_TYPE:\n    // Portals are unsupported during SSR since they're DOM-only\n    default:\n      return []\n  }\n}\n\nconst visitLoop = (\n  traversalChildren: AbstractElement[][],\n  traversalMap: Array<void | ContextMap>,\n  traversalStore: Array<void | ContextEntry>,\n  traversalErrorFrame: Array<null | ClassFrame>,\n  queue: Frame[],\n  visitor: Visitor\n): boolean => {\n  const prevDispatcher = ReactCurrentDispatcher.current\n  const start = Date.now()\n\n  try {\n    ReactCurrentDispatcher.current = Dispatcher\n    while (traversalChildren.length > 0) {\n      const element = traversalChildren[traversalChildren.length - 1].shift()\n      if (element !== undefined) {\n        const children = visitElement(element, queue, visitor)\n        traversalChildren.push(children)\n        traversalMap.push(flushPrevContextMap())\n        traversalStore.push(flushPrevContextStore())\n        traversalErrorFrame.push(getCurrentErrorFrame())\n      } else {\n        traversalChildren.pop()\n        restoreContextMap(traversalMap.pop())\n        restoreContextStore(traversalStore.pop())\n        setCurrentErrorFrame(traversalErrorFrame.pop())\n      }\n\n      if (SHOULD_YIELD && Date.now() - start > YIELD_AFTER_MS) {\n        return true\n      }\n    }\n\n    return false\n  } catch (error) {\n    const errorFrame = getCurrentErrorFrame()\n    if (!errorFrame) throw error\n    errorFrame.error = error\n    queue.unshift(errorFrame)\n    return false\n  } finally {\n    ReactCurrentDispatcher.current = prevDispatcher\n  }\n}\n\nconst makeYieldFrame = (\n  traversalChildren: AbstractElement[][],\n  traversalMap: Array<void | ContextMap>,\n  traversalStore: Array<void | ContextEntry>,\n  traversalErrorFrame: Array<null | ClassFrame>\n): Frame => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  errorFrame: getCurrentErrorFrame(),\n  thenable: null,\n  kind: 'frame.yield',\n  traversalChildren,\n  traversalMap,\n  traversalStore,\n  traversalErrorFrame\n})\n\nexport const visit = (\n  init: AbstractElement[],\n  queue: Frame[],\n  visitor: Visitor\n) => {\n  const traversalChildren: AbstractElement[][] = [init]\n  const traversalMap: Array<void | ContextMap> = [flushPrevContextMap()]\n  const traversalStore: Array<void | ContextEntry> = [flushPrevContextStore()]\n  const traversalErrorFrame: Array<null | ClassFrame> = [getCurrentErrorFrame()]\n\n  const hasYielded = visitLoop(\n    traversalChildren,\n    traversalMap,\n    traversalStore,\n    traversalErrorFrame,\n    queue,\n    visitor\n  )\n\n  if (hasYielded) {\n    queue.unshift(\n      makeYieldFrame(\n        traversalChildren,\n        traversalMap,\n        traversalStore,\n        traversalErrorFrame\n      )\n    )\n  }\n}\n\nexport const update = (frame: Frame, queue: Frame[], visitor: Visitor) => {\n  if (frame.kind === 'frame.yield') {\n    setCurrentIdentity(null)\n    setCurrentContextMap(frame.contextMap)\n    setCurrentContextStore(frame.contextStore)\n    setCurrentErrorFrame(frame.errorFrame)\n\n    const hasYielded = visitLoop(\n      frame.traversalChildren,\n      frame.traversalMap,\n      frame.traversalStore,\n      frame.traversalErrorFrame,\n      queue,\n      visitor\n    )\n\n    if (hasYielded) {\n      queue.unshift(\n        makeYieldFrame(\n          frame.traversalChildren,\n          frame.traversalMap,\n          frame.traversalStore,\n          frame.traversalErrorFrame\n        )\n      )\n    }\n  } else {\n    const prevDispatcher = ReactCurrentDispatcher.current\n    let children = null\n\n    ReactCurrentDispatcher.current = Dispatcher\n\n    try {\n      if (frame.kind === 'frame.class') {\n        children = updateClassComponent(queue, frame)\n      } else if (frame.kind === 'frame.hooks') {\n        children = updateFunctionComponent(queue, frame)\n      } else if (frame.kind === 'frame.lazy') {\n        children = updateLazyComponent(queue, frame)\n      }\n    } catch (error) {\n      const errorFrame = getCurrentErrorFrame()\n      if (!errorFrame) throw error\n      errorFrame.error = error\n      queue.unshift(errorFrame)\n      children = null\n    } finally {\n      ReactCurrentDispatcher.current = prevDispatcher\n    }\n\n    visit(getChildrenArray(children), queue, visitor)\n  }\n}\n","// @flow\n\nimport { type Node, type Element } from 'react'\nimport type {\n  Visitor,\n  YieldFrame,\n  Frame,\n  AbstractElement,\n  RendererState\n} from './types'\nimport { visit, update, SHOULD_YIELD } from './visitor'\nimport { getChildrenArray } from './element'\n\nimport {\n  setCurrentContextStore,\n  setCurrentContextMap,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame,\n  setCurrentRendererState,\n  initRendererState,\n  Dispatcher\n} from './internals'\n\n/** visit() walks all elements (depth-first) and while it walks the\n    element tree some components will suspend and put a `Frame` onto\n    the queue. Hence we recursively look at suspended components in\n    this queue, wait for their promises to resolve, and continue\n    calling visit() on their children. */\nconst flushFrames = (\n  queue: Frame[],\n  visitor: Visitor,\n  state: RendererState\n): Promise<void> => {\n  const frame = queue.shift()\n  if (!frame) {\n    return Promise.resolve()\n  }\n\n  if (SHOULD_YIELD && frame.kind === 'frame.yield') {\n    frame.thenable = new Promise((resolve, reject) => {\n      setImmediate(resolve)\n    })\n  }\n\n  return Promise.resolve(frame.thenable).then(\n    () => {\n      setCurrentRendererState(state)\n      update(frame, queue, visitor)\n      return flushFrames(queue, visitor, state)\n    },\n    (error: Error) => {\n      if (!frame.errorFrame) throw error\n      frame.errorFrame.error = error\n      update(frame.errorFrame, queue, visitor)\n    }\n  )\n}\n\nconst defaultVisitor = () => undefined\n\nconst renderPrepass = (element: Node, visitor?: Visitor): Promise<void> => {\n  if (!visitor) visitor = defaultVisitor\n\n  const queue: Frame[] = []\n  // Renderer state is kept globally but restored and\n  // passed around manually since it isn't dependent on the\n  // render tree\n  const state = initRendererState()\n  // Context state is kept globally and is modified in-place.\n  // Before we start walking the element tree we need to reset\n  // its current state\n  setCurrentContextMap({})\n  setCurrentContextStore(new Map())\n  setCurrentErrorFrame(null)\n\n  try {\n    visit(getChildrenArray(element), queue, visitor)\n  } catch (error) {\n    return Promise.reject(error)\n  }\n\n  return flushFrames(queue, visitor, state)\n}\n\nexport default renderPrepass\n"],"names":["let","Element","Portal","Fragment","StrictMode","Profiler","ContextProvider","ContextConsumer","ConcurrentMode","ForwardRef","Suspense","Memo","Lazy","Symbol","for","symbolFor","const","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_CONCURRENT_MODE_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","toArray","Children","isAbstractElement","node","getChildrenArray","filter","computeProps","props","defaultProps","Object","currentContextStore","Map","currentContextMap","prevContextMap","undefined","prevContextEntry","getCurrentContextMap","getCurrentContextStore","flushPrevContextMap","prev","flushPrevContextStore","restoreContextMap","restoreContextStore","set","setCurrentContextMap","map","setCurrentContextStore","store","readContextValue","context","value","get","_currentValue","emptyContext","maskContext","type","contextType","contextTypes","maskedContext","name","currentErrorFrame","getCurrentErrorFrame","setCurrentErrorFrame","frame","rendererStateRef","current","uniqueID","is","x","y","currentIdentity","setCurrentIdentity","id","getCurrentIdentity","Error","firstWorkInProgressHook","workInProgressHook","didScheduleRenderPhaseUpdate","renderPhaseUpdates","numberOfReRenders","setFirstHook","hook","createWorkInProgressHook","memoizedState","queue","next","basicStateReducer","state","action","useReducer","reducer","initialArg","init","initialState","last","dispatch","dispatchAction","bind","firstRenderPhaseUpdate","delete","newState","update","useMemo","nextCreate","deps","nextDeps","prevState","areHookInputsEqual","prevDeps","i","length","nextValue","useOpaqueIdentifier","toString","componentIdentity","lastRenderPhaseUpdate","noop","callback","Dispatcher","readContext","_","useSyncExternalStore","subscribe","getSnapshot","getServerSnapshot","useContext","useRef","initialValue","previousRef","ref","useState","useCallback","useMutableSource","source","_subscribe","_source","useTransition","useDeferredValue","input","useId","unstable_useId","unstable_useOpaqueIdentifier","useLayoutEffect","useImperativeHandle","useEffect","useDebugValue","resolve","payload","_payload","_status","_result","Promise","reject","_ctor","then","Component","default","catch","error","render","createElement","makeFrame","thenable","contextMap","contextStore","kind","errorFrame","renderWithHooks","refOrContext","children","push","createInstance","updater","_thrown","isMounted","enqueueForceUpdate","enqueueReplaceState","instance","completeState","_isMounted","enqueueSetState","currentPartialState","computedProps","componentDidCatch","getDerivedStateFromError","getDerivedStateFromProps","componentWillMount","UNSAFE_componentWillMount","nextState","l","partial","partialState","call","flushEnqueuedState","child","childContextTypes","getChildContext","childContext","assignContextMap","componentWillUnmount","_err","ReactCurrentDispatcher","React","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","SHOULD_YIELD","setImmediate","visitor","element","Comp","prototype","isReactComponent","promise","mountClassComponent","mountFunctionComponent","visitElement","$$typeof","typeOf","setContextValue","_context","mountLazyComponent","visitLoop","traversalChildren","traversalMap","traversalStore","traversalErrorFrame","prevDispatcher","start","Date","now","shift","pop","unshift","makeYieldFrame","visit","updateClassComponent","updateFunctionComponent","updateLazyComponent","flushFrames","setCurrentRendererState","defaultVisitor"],"mappings":"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"}