{"version":3,"file":"urql.min.es.js","sources":["../src/context.ts","../src/hooks/state.ts","../src/hooks/useMutation.ts","../src/hooks/useRequest.ts","../src/hooks/useQuery.ts","../src/hooks/cache.ts","../src/hooks/useSubscription.ts","../src/components/Mutation.ts","../src/components/Query.ts","../src/components/Subscription.ts"],"sourcesContent":["import { createContext, useContext } from 'react';\nimport { Client, createClient } from '@urql/core';\n\n// We assume some default options here; mainly not to actually be used\n// but not to error catastrophically if someone is just playing around\nconst defaultClient = createClient({ url: '/graphql' });\n\nexport const Context = createContext<Client>(defaultClient);\nexport const Provider = Context.Provider;\nexport const Consumer = Context.Consumer;\nContext.displayName = 'UrqlContext';\n\nlet hasWarnedAboutDefault = false;\n\nexport const useClient = (): Client => {\n  const client = useContext(Context);\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    client === defaultClient &&\n    !hasWarnedAboutDefault\n  ) {\n    hasWarnedAboutDefault = true;\n\n    console.warn(\n      \"Default Client: No client has been specified using urql's Provider.\" +\n        'This means that urql will be falling back to defaults including making ' +\n        'requests to `/graphql`.\\n' +\n        \"If that's not what you want, please create a client and add a Provider.\"\n    );\n  }\n\n  return client;\n};\n","export const initialState = {\n  fetching: false,\n  stale: false,\n  error: undefined,\n  data: undefined,\n  extensions: undefined,\n  operation: undefined,\n};\n\nconst isShallowDifferent = (a: any, b: any) => {\n  if (typeof a != 'object' || typeof b != 'object') return a !== b;\n  for (const x in a) if (!(x in b)) return true;\n  for (const x in b) if (a[x] !== b[x]) return true;\n  return false;\n};\n\ninterface Stateish {\n  data?: any;\n  error?: any;\n  fetching: boolean;\n  stale: boolean;\n}\n\nexport const computeNextState = <T extends Stateish>(\n  prevState: T,\n  result: Partial<T>\n): T => {\n  const newState = {\n    ...prevState,\n    ...result,\n    data:\n      result.data !== undefined || result.error ? result.data : prevState.data,\n    fetching: !!result.fetching,\n    stale: !!result.stale,\n  };\n\n  return isShallowDifferent(prevState, newState) ? newState : prevState;\n};\n\nexport const hasDepsChanged = <T extends { length: number }>(a: T, b: T) => {\n  for (let i = 0, l = b.length; i < l; i++) if (a[i] !== b[i]) return true;\n  return false;\n};\n","import { DocumentNode } from 'graphql';\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { pipe, toPromise } from 'wonka';\n\nimport {\n  AnyVariables,\n  TypedDocumentNode,\n  OperationResult,\n  OperationContext,\n  CombinedError,\n  createRequest,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { initialState } from './state';\n\nexport interface UseMutationState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseMutationResponse<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> = [\n  UseMutationState<Data, Variables>,\n  (\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<Data, Variables>>\n];\n\nexport function useMutation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string\n): UseMutationResponse<Data, Variables> {\n  const isMounted = useRef(true);\n  const client = useClient();\n\n  const [state, setState] = useState<UseMutationState<Data, Variables>>(\n    initialState\n  );\n\n  const executeMutation = useCallback(\n    (variables: Variables, context?: Partial<OperationContext>) => {\n      setState({ ...initialState, fetching: true });\n\n      return pipe(\n        client.executeMutation<Data, Variables>(\n          createRequest<Data, Variables>(query, variables),\n          context || {}\n        ),\n        toPromise\n      ).then(result => {\n        if (isMounted.current) {\n          setState({\n            fetching: false,\n            stale: !!result.stale,\n            data: result.data,\n            error: result.error,\n            extensions: result.extensions,\n            operation: result.operation,\n          });\n        }\n        return result;\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [client, query, setState]\n  );\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [state, executeMutation];\n}\n","import { DocumentNode } from 'graphql';\nimport { useRef, useMemo } from 'react';\nimport {\n  AnyVariables,\n  TypedDocumentNode,\n  GraphQLRequest,\n  createRequest,\n} from '@urql/core';\n\n/** Creates a request from a query and variables but preserves reference equality if the key isn't changing */\nexport function useRequest<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(\n  query: string | DocumentNode | TypedDocumentNode<Data, Variables>,\n  variables: Variables\n): GraphQLRequest<Data, Variables> {\n  const prev = useRef<undefined | GraphQLRequest<Data, Variables>>(undefined);\n\n  return useMemo(() => {\n    const request = createRequest<Data, Variables>(query, variables);\n    // We manually ensure reference equality if the key hasn't changed\n    if (prev.current !== undefined && prev.current.key === request.key) {\n      return prev.current;\n    } else {\n      prev.current = request;\n      return request;\n    }\n  }, [query, variables]);\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { DocumentNode } from 'graphql';\nimport { Source, pipe, subscribe, onEnd, onPush, takeWhile } from 'wonka';\nimport { useState, useEffect, useCallback, useMemo } from 'react';\n\nimport {\n  AnyVariables,\n  Client,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  RequestPolicy,\n  OperationResult,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { useRequest } from './useRequest';\nimport { getCacheForClient } from './cache';\nimport { initialState, computeNextState, hasDepsChanged } from './state';\n\nexport type UseQueryArgs<\n  Variables extends AnyVariables = AnyVariables,\n  Data = any\n> = {\n  query: string | DocumentNode | TypedDocumentNode<Data, Variables>;\n  requestPolicy?: RequestPolicy;\n  context?: Partial<OperationContext>;\n  pause?: boolean;\n} & (Variables extends void\n  ? {\n      variables?: Variables;\n    }\n  : Variables extends { [P in keyof Variables]: Variables[P] | null }\n  ? { variables?: Variables }\n  : {\n      variables: Variables;\n    });\n\nexport interface UseQueryState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseQueryResponse<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> = [\n  UseQueryState<Data, Variables>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nconst isSuspense = (client: Client, context?: Partial<OperationContext>) =>\n  client.suspense && (!context || context.suspense !== false);\n\nexport function useQuery<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(args: UseQueryArgs<Variables, Data>): UseQueryResponse<Data, Variables> {\n  const client = useClient();\n  const cache = getCacheForClient(client);\n  const suspense = isSuspense(client, args.context);\n  const request = useRequest(args.query, args.variables as Variables);\n\n  const source = useMemo(() => {\n    if (args.pause) return null;\n\n    const source = client.executeQuery(request, {\n      requestPolicy: args.requestPolicy,\n      ...args.context,\n    });\n\n    return suspense\n      ? pipe(\n          source,\n          onPush(result => {\n            cache.set(request.key, result);\n          })\n        )\n      : source;\n  }, [\n    cache,\n    client,\n    request,\n    suspense,\n    args.pause,\n    args.requestPolicy,\n    args.context,\n  ]);\n\n  const getSnapshot = useCallback(\n    (\n      source: Source<OperationResult<Data, Variables>> | null,\n      suspense: boolean\n    ): Partial<UseQueryState<Data, Variables>> => {\n      if (!source) return { fetching: false };\n\n      let result = cache.get(request.key);\n      if (!result) {\n        let resolve: (value: unknown) => void;\n\n        const subscription = pipe(\n          source,\n          takeWhile(() => (suspense && !resolve) || !result),\n          subscribe(_result => {\n            result = _result;\n            if (resolve) resolve(result);\n          })\n        );\n\n        if (result == null && suspense) {\n          const promise = new Promise(_resolve => {\n            resolve = _resolve;\n          });\n\n          cache.set(request.key, promise);\n          throw promise;\n        } else {\n          subscription.unsubscribe();\n        }\n      } else if (suspense && result != null && 'then' in result) {\n        throw result;\n      }\n\n      return (result as OperationResult<Data, Variables>) || { fetching: true };\n    },\n    [cache, request]\n  );\n\n  const deps = [\n    client,\n    request,\n    args.requestPolicy,\n    args.context,\n    args.pause,\n  ] as const;\n\n  const [state, setState] = useState(\n    () =>\n      [\n        source,\n        computeNextState(initialState, getSnapshot(source, suspense)),\n        deps,\n      ] as const\n  );\n\n  let currentResult = state[1];\n  if (source !== state[0] && hasDepsChanged(state[2], deps)) {\n    setState([\n      source,\n      (currentResult = computeNextState(\n        state[1],\n        getSnapshot(source, suspense)\n      )),\n      deps,\n    ]);\n  }\n\n  useEffect(() => {\n    const source = state[0];\n    const request = state[2][1];\n\n    let hasResult = false;\n\n    const updateResult = (result: Partial<UseQueryState<Data, Variables>>) => {\n      hasResult = true;\n      setState(state => {\n        const nextResult = computeNextState(state[1], result);\n        return state[1] !== nextResult\n          ? [state[0], nextResult, state[2]]\n          : state;\n      });\n    };\n\n    if (source) {\n      const subscription = pipe(\n        source,\n        onEnd(() => {\n          updateResult({ fetching: false });\n        }),\n        subscribe(updateResult)\n      );\n\n      if (!hasResult) updateResult({ fetching: true });\n\n      return () => {\n        cache.dispose(request.key);\n        subscription.unsubscribe();\n      };\n    } else {\n      updateResult({ fetching: false });\n    }\n  }, [cache, state[0], state[2][1]]);\n\n  const executeQuery = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      const context = {\n        requestPolicy: args.requestPolicy,\n        ...args.context,\n        ...opts,\n      };\n\n      setState(state => {\n        const source = suspense\n          ? pipe(\n              client.executeQuery(request, context),\n              onPush(result => {\n                cache.set(request.key, result);\n              })\n            )\n          : client.executeQuery(request, context);\n        return [source, state[1], deps];\n      });\n    },\n    [\n      client,\n      cache,\n      request,\n      suspense,\n      getSnapshot,\n      args.requestPolicy,\n      args.context,\n    ]\n  );\n\n  return [currentResult, executeQuery];\n}\n","import { pipe, subscribe } from 'wonka';\nimport { Client, OperationResult } from '@urql/core';\n\ntype CacheEntry = OperationResult | Promise<unknown> | undefined;\n\ninterface Cache {\n  get(key: number): CacheEntry;\n  set(key: number, value: CacheEntry): void;\n  dispose(key: number): void;\n}\n\ninterface ClientWithCache extends Client {\n  _react?: Cache;\n}\n\nexport const getCacheForClient = (client: Client): Cache => {\n  if (!(client as ClientWithCache)._react) {\n    const reclaim = new Set();\n    const map = new Map<number, CacheEntry>();\n\n    if (client.operations$ /* not available in mocks */) {\n      pipe(\n        client.operations$,\n        subscribe(operation => {\n          if (operation.kind === 'teardown' && reclaim.has(operation.key)) {\n            reclaim.delete(operation.key);\n            map.delete(operation.key);\n          }\n        })\n      );\n    }\n\n    (client as ClientWithCache)._react = {\n      get(key) {\n        return map.get(key);\n      },\n      set(key, value) {\n        reclaim.delete(key);\n        map.set(key, value);\n      },\n      dispose(key) {\n        reclaim.add(key);\n      },\n    };\n  }\n\n  return (client as ClientWithCache)._react!;\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { DocumentNode } from 'graphql';\nimport { pipe, subscribe, onEnd } from 'wonka';\nimport { useEffect, useState, useCallback, useMemo, useRef } from 'react';\n\nimport {\n  AnyVariables,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { useRequest } from './useRequest';\nimport { initialState, computeNextState, hasDepsChanged } from './state';\n\nexport type UseSubscriptionArgs<\n  Variables extends AnyVariables = AnyVariables,\n  Data = any\n> = {\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string;\n  pause?: boolean;\n  context?: Partial<OperationContext>;\n} & (Variables extends void\n  ? {\n      variables?: Variables;\n    }\n  : Variables extends { [P in keyof Variables]: Variables[P] | null }\n  ? { variables?: Variables }\n  : {\n      variables: Variables;\n    });\n\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\n\nexport interface UseSubscriptionState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseSubscriptionResponse<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> = [\n  UseSubscriptionState<Data, Variables>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nexport function useSubscription<\n  Data = any,\n  Result = Data,\n  Variables extends AnyVariables = AnyVariables\n>(\n  args: UseSubscriptionArgs<Variables, Data>,\n  handler?: SubscriptionHandler<Data, Result>\n): UseSubscriptionResponse<Result, Variables> {\n  const client = useClient();\n  const request = useRequest(args.query, args.variables as Variables);\n\n  const handlerRef = useRef<SubscriptionHandler<Data, Result> | undefined>(\n    handler\n  );\n  handlerRef.current = handler;\n\n  const source = useMemo(\n    () =>\n      !args.pause ? client.executeSubscription(request, args.context) : null,\n    [client, request, args.pause, args.context]\n  );\n\n  const deps = [client, request, args.context, args.pause] as const;\n\n  const [state, setState] = useState(\n    () => [source, { ...initialState, fetching: !!source }, deps] as const\n  );\n\n  let currentResult = state[1];\n  if (source !== state[0] && hasDepsChanged(state[2], deps)) {\n    setState([\n      source,\n      (currentResult = computeNextState(state[1], { fetching: !!source })),\n      deps,\n    ]);\n  }\n\n  useEffect(() => {\n    const updateResult = (\n      result: Partial<UseSubscriptionState<Data, Variables>>\n    ) => {\n      setState(state => {\n        const nextResult = computeNextState(state[1], result);\n        if (state[1] === nextResult) return state;\n        if (handlerRef.current && state[1].data !== nextResult.data) {\n          nextResult.data = handlerRef.current(\n            state[1].data,\n            nextResult.data!\n          ) as any;\n        }\n\n        return [state[0], nextResult as any, state[2]];\n      });\n    };\n\n    if (state[0]) {\n      return pipe(\n        state[0],\n        onEnd(() => {\n          updateResult({ fetching: !!source });\n        }),\n        subscribe(updateResult)\n      ).unsubscribe;\n    } else {\n      updateResult({ fetching: false });\n    }\n  }, [state[0]]);\n\n  // This is the imperative execute function passed to the user\n  const executeSubscription = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      const source = client.executeSubscription(request, {\n        ...args.context,\n        ...opts,\n      });\n\n      setState(state => [source, state[1], deps]);\n    },\n    [client, args.context, request]\n  );\n\n  return [currentResult, executeSubscription];\n}\n","import { DocumentNode } from 'graphql';\nimport { ReactElement } from 'react';\nimport {\n  AnyVariables,\n  TypedDocumentNode,\n  OperationResult,\n  OperationContext,\n} from '@urql/core';\nimport { useMutation, UseMutationState } from '../hooks';\n\nexport interface MutationProps<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> {\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string;\n  children: (arg: MutationState<Data, Variables>) => ReactElement<any>;\n}\n\nexport interface MutationState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> extends UseMutationState<Data, Variables> {\n  executeMutation: (\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<Data, Variables>>;\n}\n\nexport function Mutation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(props: MutationProps<Data, Variables>): ReactElement<any> {\n  const mutation = useMutation<Data, Variables>(props.query);\n  return props.children({ ...mutation[0], executeMutation: mutation[1] });\n}\n","import { ReactElement } from 'react';\nimport { AnyVariables, OperationContext } from '@urql/core';\nimport { useQuery, UseQueryArgs, UseQueryState } from '../hooks';\n\nexport type QueryProps<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> = UseQueryArgs<Variables, Data> & {\n  children: (arg: QueryState<Data, Variables>) => ReactElement<any>;\n};\n\nexport interface QueryState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> extends UseQueryState<Data, Variables> {\n  executeQuery: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Query<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(props: QueryProps<Data, Variables>): ReactElement<any> {\n  const query = useQuery<Data, Variables>(props);\n  return props.children({ ...query[0], executeQuery: query[1] });\n}\n","import { ReactElement } from 'react';\nimport { AnyVariables, OperationContext } from '@urql/core';\n\nimport {\n  useSubscription,\n  UseSubscriptionArgs,\n  UseSubscriptionState,\n  SubscriptionHandler,\n} from '../hooks';\n\nexport type SubscriptionProps<\n  Data = any,\n  Result = Data,\n  Variables extends AnyVariables = AnyVariables\n> = UseSubscriptionArgs<Variables, Data> & {\n  handler?: SubscriptionHandler<Data, Result>;\n  children: (arg: SubscriptionState<Result, Variables>) => ReactElement<any>;\n};\n\nexport interface SubscriptionState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> extends UseSubscriptionState<Data, Variables> {\n  executeSubscription: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Subscription<\n  Data = any,\n  Result = Data,\n  Variables extends AnyVariables = AnyVariables\n>(props: SubscriptionProps<Data, Result, Variables>): ReactElement<any> {\n  const subscription = useSubscription<Data, Result, Variables>(\n    props,\n    props.handler\n  );\n\n  return props.children({\n    ...subscription[0],\n    executeSubscription: subscription[1],\n  });\n}\n"],"names":["url","createContext","createClient","Provider","Context","Consumer","displayName","hasWarnedAboutDefault","fetching","stale","undefined","error","data","extensions","prevState","newState","result","b","a","isShallowDifferent","hasDepsChanged","i","l","length","useMutation","query","isMounted","useRef","client","useClient","setState","current","state","executeMutation","useRequest","variables","prev","key","request","useQuery","args","cache","_react","reclaim","Set","map","Map","operations$","operation","kind","has","delete","get","set","value","dispose","add","getCacheForClient","context","suspense","source","useMemo","executeQuery","pause","requestPolicy","resolve","promise","Promise","_resolve","deps","currentResult","computeNextState","getSnapshot","updateResult","nextResult","subscribe","hasResult","useCallback","opts","onPush","handler","handlerRef","unsubscribe","executeSubscription","mutation","props","children","Query","subscription"],"mappings":"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"}