{"version":3,"file":"urql.js","sources":["../src/context.ts","../src/hooks/state.ts","../src/hooks/useMutation.ts","../src/hooks/useRequest.ts","../src/hooks/cache.ts","../src/hooks/useQuery.ts","../src/hooks/useSubscription.ts","../src/components/Mutation.ts","../src/components/Query.ts","../src/components/Subscription.ts"],"sourcesContent":["import { createContext, useContext } from 'react';\nimport { Client, createClient } from '@urql/core';\n\n// We assume some default options here; mainly not to actually be used\n// but not to error catastrophically if someone is just playing around\nconst defaultClient = createClient({ url: '/graphql' });\n\nexport const Context = createContext<Client>(defaultClient);\nexport const Provider = Context.Provider;\nexport const Consumer = Context.Consumer;\nContext.displayName = 'UrqlContext';\n\nlet hasWarnedAboutDefault = false;\n\nexport const useClient = (): Client => {\n  const client = useContext(Context);\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    client === defaultClient &&\n    !hasWarnedAboutDefault\n  ) {\n    hasWarnedAboutDefault = true;\n\n    console.warn(\n      \"Default Client: No client has been specified using urql's Provider.\" +\n        'This means that urql will be falling back to defaults including making ' +\n        'requests to `/graphql`.\\n' +\n        \"If that's not what you want, please create a client and add a Provider.\"\n    );\n  }\n\n  return client;\n};\n","export const initialState = {\n  fetching: false,\n  stale: false,\n  error: undefined,\n  data: undefined,\n  extensions: undefined,\n  operation: undefined,\n};\n\nconst isShallowDifferent = (a: any, b: any) => {\n  if (typeof a != 'object' || typeof b != 'object') return a !== b;\n  for (const x in a) if (!(x in b)) return true;\n  for (const x in b) if (a[x] !== b[x]) return true;\n  return false;\n};\n\ninterface Stateish {\n  data?: any;\n  error?: any;\n  fetching: boolean;\n  stale: boolean;\n}\n\nexport const computeNextState = <T extends Stateish>(\n  prevState: T,\n  result: Partial<T>\n): T => {\n  const newState = {\n    ...prevState,\n    ...result,\n    data:\n      result.data !== undefined || result.error ? result.data : prevState.data,\n    fetching: !!result.fetching,\n    stale: !!result.stale,\n  };\n\n  return isShallowDifferent(prevState, newState) ? newState : prevState;\n};\n\nexport const hasDepsChanged = <T extends { length: number }>(a: T, b: T) => {\n  for (let i = 0, l = b.length; i < l; i++) if (a[i] !== b[i]) return true;\n  return false;\n};\n","import { DocumentNode } from 'graphql';\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { pipe, toPromise } from 'wonka';\n\nimport {\n  AnyVariables,\n  TypedDocumentNode,\n  OperationResult,\n  OperationContext,\n  CombinedError,\n  createRequest,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { initialState } from './state';\n\nexport interface UseMutationState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseMutationResponse<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> = [\n  UseMutationState<Data, Variables>,\n  (\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<Data, Variables>>\n];\n\nexport function useMutation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string\n): UseMutationResponse<Data, Variables> {\n  const isMounted = useRef(true);\n  const client = useClient();\n\n  const [state, setState] = useState<UseMutationState<Data, Variables>>(\n    initialState\n  );\n\n  const executeMutation = useCallback(\n    (variables: Variables, context?: Partial<OperationContext>) => {\n      setState({ ...initialState, fetching: true });\n\n      return pipe(\n        client.executeMutation<Data, Variables>(\n          createRequest<Data, Variables>(query, variables),\n          context || {}\n        ),\n        toPromise\n      ).then(result => {\n        if (isMounted.current) {\n          setState({\n            fetching: false,\n            stale: !!result.stale,\n            data: result.data,\n            error: result.error,\n            extensions: result.extensions,\n            operation: result.operation,\n          });\n        }\n        return result;\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [client, query, setState]\n  );\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [state, executeMutation];\n}\n","import { DocumentNode } from 'graphql';\nimport { useRef, useMemo } from 'react';\nimport {\n  AnyVariables,\n  TypedDocumentNode,\n  GraphQLRequest,\n  createRequest,\n} from '@urql/core';\n\n/** Creates a request from a query and variables but preserves reference equality if the key isn't changing */\nexport function useRequest<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(\n  query: string | DocumentNode | TypedDocumentNode<Data, Variables>,\n  variables: Variables\n): GraphQLRequest<Data, Variables> {\n  const prev = useRef<undefined | GraphQLRequest<Data, Variables>>(undefined);\n\n  return useMemo(() => {\n    const request = createRequest<Data, Variables>(query, variables);\n    // We manually ensure reference equality if the key hasn't changed\n    if (prev.current !== undefined && prev.current.key === request.key) {\n      return prev.current;\n    } else {\n      prev.current = request;\n      return request;\n    }\n  }, [query, variables]);\n}\n","import { pipe, subscribe } from 'wonka';\nimport { Client, OperationResult } from '@urql/core';\n\ntype CacheEntry = OperationResult | Promise<unknown> | undefined;\n\ninterface Cache {\n  get(key: number): CacheEntry;\n  set(key: number, value: CacheEntry): void;\n  dispose(key: number): void;\n}\n\ninterface ClientWithCache extends Client {\n  _react?: Cache;\n}\n\nexport const getCacheForClient = (client: Client): Cache => {\n  if (!(client as ClientWithCache)._react) {\n    const reclaim = new Set();\n    const map = new Map<number, CacheEntry>();\n\n    if (client.operations$ /* not available in mocks */) {\n      pipe(\n        client.operations$,\n        subscribe(operation => {\n          if (operation.kind === 'teardown' && reclaim.has(operation.key)) {\n            reclaim.delete(operation.key);\n            map.delete(operation.key);\n          }\n        })\n      );\n    }\n\n    (client as ClientWithCache)._react = {\n      get(key) {\n        return map.get(key);\n      },\n      set(key, value) {\n        reclaim.delete(key);\n        map.set(key, value);\n      },\n      dispose(key) {\n        reclaim.add(key);\n      },\n    };\n  }\n\n  return (client as ClientWithCache)._react!;\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { DocumentNode } from 'graphql';\nimport { Source, pipe, subscribe, onEnd, onPush, takeWhile } from 'wonka';\nimport { useState, useEffect, useCallback, useMemo } from 'react';\n\nimport {\n  AnyVariables,\n  Client,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  RequestPolicy,\n  OperationResult,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { useRequest } from './useRequest';\nimport { getCacheForClient } from './cache';\nimport { initialState, computeNextState, hasDepsChanged } from './state';\n\nexport type UseQueryArgs<\n  Variables extends AnyVariables = AnyVariables,\n  Data = any\n> = {\n  query: string | DocumentNode | TypedDocumentNode<Data, Variables>;\n  requestPolicy?: RequestPolicy;\n  context?: Partial<OperationContext>;\n  pause?: boolean;\n} & (Variables extends void\n  ? {\n      variables?: Variables;\n    }\n  : Variables extends { [P in keyof Variables]: Variables[P] | null }\n  ? { variables?: Variables }\n  : {\n      variables: Variables;\n    });\n\nexport interface UseQueryState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseQueryResponse<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> = [\n  UseQueryState<Data, Variables>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nconst isSuspense = (client: Client, context?: Partial<OperationContext>) =>\n  client.suspense && (!context || context.suspense !== false);\n\nexport function useQuery<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(args: UseQueryArgs<Variables, Data>): UseQueryResponse<Data, Variables> {\n  const client = useClient();\n  const cache = getCacheForClient(client);\n  const suspense = isSuspense(client, args.context);\n  const request = useRequest(args.query, args.variables as Variables);\n\n  const source = useMemo(() => {\n    if (args.pause) return null;\n\n    const source = client.executeQuery(request, {\n      requestPolicy: args.requestPolicy,\n      ...args.context,\n    });\n\n    return suspense\n      ? pipe(\n          source,\n          onPush(result => {\n            cache.set(request.key, result);\n          })\n        )\n      : source;\n  }, [\n    cache,\n    client,\n    request,\n    suspense,\n    args.pause,\n    args.requestPolicy,\n    args.context,\n  ]);\n\n  const getSnapshot = useCallback(\n    (\n      source: Source<OperationResult<Data, Variables>> | null,\n      suspense: boolean\n    ): Partial<UseQueryState<Data, Variables>> => {\n      if (!source) return { fetching: false };\n\n      let result = cache.get(request.key);\n      if (!result) {\n        let resolve: (value: unknown) => void;\n\n        const subscription = pipe(\n          source,\n          takeWhile(() => (suspense && !resolve) || !result),\n          subscribe(_result => {\n            result = _result;\n            if (resolve) resolve(result);\n          })\n        );\n\n        if (result == null && suspense) {\n          const promise = new Promise(_resolve => {\n            resolve = _resolve;\n          });\n\n          cache.set(request.key, promise);\n          throw promise;\n        } else {\n          subscription.unsubscribe();\n        }\n      } else if (suspense && result != null && 'then' in result) {\n        throw result;\n      }\n\n      return (result as OperationResult<Data, Variables>) || { fetching: true };\n    },\n    [cache, request]\n  );\n\n  const deps = [\n    client,\n    request,\n    args.requestPolicy,\n    args.context,\n    args.pause,\n  ] as const;\n\n  const [state, setState] = useState(\n    () =>\n      [\n        source,\n        computeNextState(initialState, getSnapshot(source, suspense)),\n        deps,\n      ] as const\n  );\n\n  let currentResult = state[1];\n  if (source !== state[0] && hasDepsChanged(state[2], deps)) {\n    setState([\n      source,\n      (currentResult = computeNextState(\n        state[1],\n        getSnapshot(source, suspense)\n      )),\n      deps,\n    ]);\n  }\n\n  useEffect(() => {\n    const source = state[0];\n    const request = state[2][1];\n\n    let hasResult = false;\n\n    const updateResult = (result: Partial<UseQueryState<Data, Variables>>) => {\n      hasResult = true;\n      setState(state => {\n        const nextResult = computeNextState(state[1], result);\n        return state[1] !== nextResult\n          ? [state[0], nextResult, state[2]]\n          : state;\n      });\n    };\n\n    if (source) {\n      const subscription = pipe(\n        source,\n        onEnd(() => {\n          updateResult({ fetching: false });\n        }),\n        subscribe(updateResult)\n      );\n\n      if (!hasResult) updateResult({ fetching: true });\n\n      return () => {\n        cache.dispose(request.key);\n        subscription.unsubscribe();\n      };\n    } else {\n      updateResult({ fetching: false });\n    }\n  }, [cache, state[0], state[2][1]]);\n\n  const executeQuery = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      const context = {\n        requestPolicy: args.requestPolicy,\n        ...args.context,\n        ...opts,\n      };\n\n      setState(state => {\n        const source = suspense\n          ? pipe(\n              client.executeQuery(request, context),\n              onPush(result => {\n                cache.set(request.key, result);\n              })\n            )\n          : client.executeQuery(request, context);\n        return [source, state[1], deps];\n      });\n    },\n    [\n      client,\n      cache,\n      request,\n      suspense,\n      getSnapshot,\n      args.requestPolicy,\n      args.context,\n    ]\n  );\n\n  return [currentResult, executeQuery];\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { DocumentNode } from 'graphql';\nimport { pipe, subscribe, onEnd } from 'wonka';\nimport { useEffect, useState, useCallback, useMemo, useRef } from 'react';\n\nimport {\n  AnyVariables,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { useRequest } from './useRequest';\nimport { initialState, computeNextState, hasDepsChanged } from './state';\n\nexport type UseSubscriptionArgs<\n  Variables extends AnyVariables = AnyVariables,\n  Data = any\n> = {\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string;\n  pause?: boolean;\n  context?: Partial<OperationContext>;\n} & (Variables extends void\n  ? {\n      variables?: Variables;\n    }\n  : Variables extends { [P in keyof Variables]: Variables[P] | null }\n  ? { variables?: Variables }\n  : {\n      variables: Variables;\n    });\n\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\n\nexport interface UseSubscriptionState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseSubscriptionResponse<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> = [\n  UseSubscriptionState<Data, Variables>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nexport function useSubscription<\n  Data = any,\n  Result = Data,\n  Variables extends AnyVariables = AnyVariables\n>(\n  args: UseSubscriptionArgs<Variables, Data>,\n  handler?: SubscriptionHandler<Data, Result>\n): UseSubscriptionResponse<Result, Variables> {\n  const client = useClient();\n  const request = useRequest(args.query, args.variables as Variables);\n\n  const handlerRef = useRef<SubscriptionHandler<Data, Result> | undefined>(\n    handler\n  );\n  handlerRef.current = handler;\n\n  const source = useMemo(\n    () =>\n      !args.pause ? client.executeSubscription(request, args.context) : null,\n    [client, request, args.pause, args.context]\n  );\n\n  const deps = [client, request, args.context, args.pause] as const;\n\n  const [state, setState] = useState(\n    () => [source, { ...initialState, fetching: !!source }, deps] as const\n  );\n\n  let currentResult = state[1];\n  if (source !== state[0] && hasDepsChanged(state[2], deps)) {\n    setState([\n      source,\n      (currentResult = computeNextState(state[1], { fetching: !!source })),\n      deps,\n    ]);\n  }\n\n  useEffect(() => {\n    const updateResult = (\n      result: Partial<UseSubscriptionState<Data, Variables>>\n    ) => {\n      setState(state => {\n        const nextResult = computeNextState(state[1], result);\n        if (state[1] === nextResult) return state;\n        if (handlerRef.current && state[1].data !== nextResult.data) {\n          nextResult.data = handlerRef.current(\n            state[1].data,\n            nextResult.data!\n          ) as any;\n        }\n\n        return [state[0], nextResult as any, state[2]];\n      });\n    };\n\n    if (state[0]) {\n      return pipe(\n        state[0],\n        onEnd(() => {\n          updateResult({ fetching: !!source });\n        }),\n        subscribe(updateResult)\n      ).unsubscribe;\n    } else {\n      updateResult({ fetching: false });\n    }\n  }, [state[0]]);\n\n  // This is the imperative execute function passed to the user\n  const executeSubscription = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      const source = client.executeSubscription(request, {\n        ...args.context,\n        ...opts,\n      });\n\n      setState(state => [source, state[1], deps]);\n    },\n    [client, args.context, request]\n  );\n\n  return [currentResult, executeSubscription];\n}\n","import { DocumentNode } from 'graphql';\nimport { ReactElement } from 'react';\nimport {\n  AnyVariables,\n  TypedDocumentNode,\n  OperationResult,\n  OperationContext,\n} from '@urql/core';\nimport { useMutation, UseMutationState } from '../hooks';\n\nexport interface MutationProps<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> {\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string;\n  children: (arg: MutationState<Data, Variables>) => ReactElement<any>;\n}\n\nexport interface MutationState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> extends UseMutationState<Data, Variables> {\n  executeMutation: (\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<Data, Variables>>;\n}\n\nexport function Mutation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(props: MutationProps<Data, Variables>): ReactElement<any> {\n  const mutation = useMutation<Data, Variables>(props.query);\n  return props.children({ ...mutation[0], executeMutation: mutation[1] });\n}\n","import { ReactElement } from 'react';\nimport { AnyVariables, OperationContext } from '@urql/core';\nimport { useQuery, UseQueryArgs, UseQueryState } from '../hooks';\n\nexport type QueryProps<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> = UseQueryArgs<Variables, Data> & {\n  children: (arg: QueryState<Data, Variables>) => ReactElement<any>;\n};\n\nexport interface QueryState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> extends UseQueryState<Data, Variables> {\n  executeQuery: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Query<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(props: QueryProps<Data, Variables>): ReactElement<any> {\n  const query = useQuery<Data, Variables>(props);\n  return props.children({ ...query[0], executeQuery: query[1] });\n}\n","import { ReactElement } from 'react';\nimport { AnyVariables, OperationContext } from '@urql/core';\n\nimport {\n  useSubscription,\n  UseSubscriptionArgs,\n  UseSubscriptionState,\n  SubscriptionHandler,\n} from '../hooks';\n\nexport type SubscriptionProps<\n  Data = any,\n  Result = Data,\n  Variables extends AnyVariables = AnyVariables\n> = UseSubscriptionArgs<Variables, Data> & {\n  handler?: SubscriptionHandler<Data, Result>;\n  children: (arg: SubscriptionState<Result, Variables>) => ReactElement<any>;\n};\n\nexport interface SubscriptionState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> extends UseSubscriptionState<Data, Variables> {\n  executeSubscription: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Subscription<\n  Data = any,\n  Result = Data,\n  Variables extends AnyVariables = AnyVariables\n>(props: SubscriptionProps<Data, Result, Variables>): ReactElement<any> {\n  const subscription = useSubscription<Data, Result, Variables>(\n    props,\n    props.handler\n  );\n\n  return props.children({\n    ...subscription[0],\n    executeSubscription: subscription[1],\n  });\n}\n"],"names":["defaultClient","createClient","url","Context","createContext","Provider","Consumer","displayName","hasWarnedAboutDefault","useClient","client","useContext","process","env","NODE_ENV","initialState","fetching","stale","error","undefined","data","extensions","operation","isShallowDifferent","a","b","x","computeNextState","prevState","result","newState","hasDepsChanged","i","l","length","useMutation","query","isMounted","useRef","setState","current","state","executeMutation","useRequest","variables","prev","key","request","getCacheForClient","_react","reclaim","Set","map","Map","operations$","kind","has","delete","get","set","value","dispose","add","isSuspense","context","suspense","useQuery","args","cache","source","useMemo","executeQuery","pause","requestPolicy","resolve","promise","Promise","_resolve","deps","currentResult","getSnapshot","updateResult","nextResult","subscribe","hasResult","useCallback","opts","onPush","useSubscription","handler","handlerRef","executeSubscription","useState","Mutation","props","children","mutation","Query","Subscription","subscription"],"mappings":"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"}