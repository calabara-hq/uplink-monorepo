import { createClient as e, createRequest as r } from "@urql/core";

export * from "@urql/core";

import { createContext as t, useContext as n, useRef as a, useState as u, useCallback as i, useEffect as o, useMemo as s } from "react";

import { toPromise as c, subscribe as v, onPush as f, takeWhile as l, onEnd as d } from "wonka";

var p = e({
  url: "/graphql"
});

var y = t(p);

var h = y.Provider;

var x = y.Consumer;

y.displayName = "UrqlContext";

var g = !1;

var useClient = () => {
  var e = n(y);
  if ("production" !== process.env.NODE_ENV && e === p && !g) {
    g = !0;
    console.warn("Default Client: No client has been specified using urql's Provider.This means that urql will be falling back to defaults including making requests to `/graphql`.\nIf that's not what you want, please create a client and add a Provider.");
  }
  return e;
};

var b = {
  fetching: !1,
  stale: !1,
  error: void 0,
  data: void 0,
  extensions: void 0,
  operation: void 0
};

var computeNextState = (e, r) => {
  var t = {
    ...e,
    ...r,
    data: void 0 !== r.data || r.error ? r.data : e.data,
    fetching: !!r.fetching,
    stale: !!r.stale
  };
  return ((e, r) => {
    if ("object" != typeof e || "object" != typeof r) {
      return e !== r;
    }
    for (var t in e) {
      if (!(t in r)) {
        return !0;
      }
    }
    for (var n in r) {
      if (e[n] !== r[n]) {
        return !0;
      }
    }
    return !1;
  })(e, t) ? t : e;
};

var hasDepsChanged = (e, r) => {
  for (var t = 0, n = r.length; t < n; t++) {
    if (e[t] !== r[t]) {
      return !0;
    }
  }
  return !1;
};

function useMutation(e) {
  var t = a(!0);
  var n = useClient();
  var [s, v] = u(b);
  var f = i(((a, u) => {
    v({
      ...b,
      fetching: !0
    });
    return c(n.executeMutation(r(e, a), u || {})).then((e => {
      if (t.current) {
        v({
          fetching: !1,
          stale: !!e.stale,
          data: e.data,
          error: e.error,
          extensions: e.extensions,
          operation: e.operation
        });
      }
      return e;
    }));
  }), [ n, e, v ]);
  o((() => {
    t.current = !0;
    return () => {
      t.current = !1;
    };
  }), []);
  return [ s, f ];
}

function useRequest(e, t) {
  var n = a(void 0);
  return s((() => {
    var a = r(e, t);
    if (void 0 !== n.current && n.current.key === a.key) {
      return n.current;
    } else {
      n.current = a;
      return a;
    }
  }), [ e, t ]);
}

function useQuery(e) {
  var r = useClient();
  var t = (e => {
    if (!e._react) {
      var r = new Set;
      var t = new Map;
      if (e.operations$) {
        v((e => {
          if ("teardown" === e.kind && r.has(e.key)) {
            r.delete(e.key);
            t.delete(e.key);
          }
        }))(e.operations$);
      }
      e._react = {
        get: e => t.get(e),
        set(e, n) {
          r.delete(e);
          t.set(e, n);
        },
        dispose(e) {
          r.add(e);
        }
      };
    }
    return e._react;
  })(r);
  var n = ((e, r) => e.suspense && (!r || !1 !== r.suspense))(r, e.context);
  var a = useRequest(e.query, e.variables);
  var c = s((() => {
    if (e.pause) {
      return null;
    }
    var u = r.executeQuery(a, {
      requestPolicy: e.requestPolicy,
      ...e.context
    });
    return n ? f((e => {
      t.set(a.key, e);
    }))(u) : u;
  }), [ t, r, a, n, e.pause, e.requestPolicy, e.context ]);
  var p = i(((e, r) => {
    if (!e) {
      return {
        fetching: !1
      };
    }
    var n = t.get(a.key);
    if (!n) {
      var u;
      var i = v((e => {
        n = e;
        if (u) {
          u(n);
        }
      }))(l((() => r && !u || !n))(e));
      if (null == n && r) {
        var o = new Promise((e => {
          u = e;
        }));
        t.set(a.key, o);
        throw o;
      } else {
        i.unsubscribe();
      }
    } else if (r && null != n && "then" in n) {
      throw n;
    }
    return n || {
      fetching: !0
    };
  }), [ t, a ]);
  var y = [ r, a, e.requestPolicy, e.context, e.pause ];
  var [h, x] = u((() => [ c, computeNextState(b, p(c, n)), y ]));
  var g = h[1];
  if (c !== h[0] && hasDepsChanged(h[2], y)) {
    x([ c, g = computeNextState(h[1], p(c, n)), y ]);
  }
  o((() => {
    var e = h[0];
    var r = h[2][1];
    var n = !1;
    var updateResult = e => {
      n = !0;
      x((r => {
        var t = computeNextState(r[1], e);
        return r[1] !== t ? [ r[0], t, r[2] ] : r;
      }));
    };
    if (e) {
      var a = v(updateResult)(d((() => {
        updateResult({
          fetching: !1
        });
      }))(e));
      if (!n) {
        updateResult({
          fetching: !0
        });
      }
      return () => {
        t.dispose(r.key);
        a.unsubscribe();
      };
    } else {
      updateResult({
        fetching: !1
      });
    }
  }), [ t, h[0], h[2][1] ]);
  var q = i((u => {
    var i = {
      requestPolicy: e.requestPolicy,
      ...e.context,
      ...u
    };
    x((e => [ n ? f((e => {
      t.set(a.key, e);
    }))(r.executeQuery(a, i)) : r.executeQuery(a, i), e[1], y ]));
  }), [ r, t, a, n, p, e.requestPolicy, e.context ]);
  return [ g, q ];
}

function useSubscription(e, r) {
  var t = useClient();
  var n = useRequest(e.query, e.variables);
  var c = a(r);
  c.current = r;
  var f = s((() => !e.pause ? t.executeSubscription(n, e.context) : null), [ t, n, e.pause, e.context ]);
  var l = [ t, n, e.context, e.pause ];
  var [p, y] = u((() => [ f, {
    ...b,
    fetching: !!f
  }, l ]));
  var h = p[1];
  if (f !== p[0] && hasDepsChanged(p[2], l)) {
    y([ f, h = computeNextState(p[1], {
      fetching: !!f
    }), l ]);
  }
  o((() => {
    var updateResult = e => {
      y((r => {
        var t = computeNextState(r[1], e);
        if (r[1] === t) {
          return r;
        }
        if (c.current && r[1].data !== t.data) {
          t.data = c.current(r[1].data, t.data);
        }
        return [ r[0], t, r[2] ];
      }));
    };
    if (p[0]) {
      return v(updateResult)(d((() => {
        updateResult({
          fetching: !!f
        });
      }))(p[0])).unsubscribe;
    } else {
      updateResult({
        fetching: !1
      });
    }
  }), [ p[0] ]);
  var x = i((r => {
    var a = t.executeSubscription(n, {
      ...e.context,
      ...r
    });
    y((e => [ a, e[1], l ]));
  }), [ t, e.context, n ]);
  return [ h, x ];
}

function Mutation(e) {
  var r = useMutation(e.query);
  return e.children({
    ...r[0],
    executeMutation: r[1]
  });
}

function Query(e) {
  var r = useQuery(e);
  return e.children({
    ...r[0],
    executeQuery: r[1]
  });
}

function Subscription(e) {
  var r = useSubscription(e, e.handler);
  return e.children({
    ...r[0],
    executeSubscription: r[1]
  });
}

export { x as Consumer, y as Context, Mutation, h as Provider, Query, Subscription, useClient, useMutation, useQuery, useSubscription };
//# sourceMappingURL=urql.es.js.map
