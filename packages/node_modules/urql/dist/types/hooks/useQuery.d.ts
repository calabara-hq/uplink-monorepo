import { DocumentNode } from 'graphql';
import { AnyVariables, TypedDocumentNode, CombinedError, OperationContext, RequestPolicy, Operation } from '@urql/core';
export declare type UseQueryArgs<Variables extends AnyVariables = AnyVariables, Data = any> = {
    query: string | DocumentNode | TypedDocumentNode<Data, Variables>;
    requestPolicy?: RequestPolicy;
    context?: Partial<OperationContext>;
    pause?: boolean;
} & (Variables extends void ? {
    variables?: Variables;
} : Variables extends {
    [P in keyof Variables]: Variables[P] | null;
} ? {
    variables?: Variables;
} : {
    variables: Variables;
});
export interface UseQueryState<Data = any, Variables extends AnyVariables = AnyVariables> {
    fetching: boolean;
    stale: boolean;
    data?: Data;
    error?: CombinedError;
    extensions?: Record<string, any>;
    operation?: Operation<Data, Variables>;
}
export declare type UseQueryResponse<Data = any, Variables extends AnyVariables = AnyVariables> = [
    UseQueryState<Data, Variables>,
    (opts?: Partial<OperationContext>) => void
];
export declare function useQuery<Data = any, Variables extends AnyVariables = AnyVariables>(args: UseQueryArgs<Variables, Data>): UseQueryResponse<Data, Variables>;
