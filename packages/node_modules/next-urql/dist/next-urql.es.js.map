{"version":3,"file":"next-urql.es.js","sources":["../src/init-urql-client.ts","../src/with-urql-client.ts"],"sourcesContent":["import { Client, ClientOptions, createClient } from '@urql/core';\n\nlet urqlClient: Client | null = null;\n\nexport function resetClient() {\n  urqlClient = null;\n}\n\nexport function initUrqlClient(\n  clientOptions: ClientOptions,\n  canEnableSuspense: boolean\n): Client | null {\n  // Create a new Client for every server-side rendered request.\n  // This ensures we reset the state for each rendered page.\n  // If there is an exising client instance on the client-side, use it.\n  const isServer = typeof window === 'undefined';\n  if (isServer || !urqlClient) {\n    urqlClient = createClient({\n      ...clientOptions,\n      suspense: canEnableSuspense && (isServer || clientOptions.suspense),\n    });\n    // Serialize the urqlClient to null on the client-side.\n    // This ensures we don't share client and server instances of the urqlClient.\n    (urqlClient as any).toJSON = () => null;\n  }\n\n  // Return both the Client instance and the ssrCache.\n  return urqlClient;\n}\n","import {\n  createElement,\n  useCallback,\n  useReducer,\n  useMemo,\n  ReactNode,\n  ReactElement,\n} from 'react';\nimport ssrPrepass from 'react-ssr-prepass';\nimport { NextComponentType, NextPage, NextPageContext } from 'next';\nimport NextApp, { AppContext } from 'next/app';\n\nimport {\n  Provider,\n  ssrExchange,\n  dedupExchange,\n  cacheExchange,\n  fetchExchange,\n} from 'urql';\n\nimport { initUrqlClient, resetClient } from './init-urql-client';\n\nimport {\n  NextUrqlClientConfig,\n  NextUrqlContext,\n  WithUrqlProps,\n  WithUrqlClientOptions,\n  SSRExchange,\n} from './types';\n\nlet ssr: SSRExchange;\ntype NextPageWithLayout = NextPage & {\n  getLayout?: (page: ReactElement) => ReactNode;\n};\n\nexport function withUrqlClient(\n  getClientConfig: NextUrqlClientConfig,\n  options?: WithUrqlClientOptions\n) {\n  if (!options) options = {};\n\n  return <C extends NextPage<any> | typeof NextApp>(\n    AppOrPage: C\n  ): NextComponentType<NextUrqlContext, {}, WithUrqlProps> => {\n    const shouldEnableSuspense = Boolean(\n      (AppOrPage.getInitialProps || options!.ssr) && !options!.neverSuspend\n    );\n\n    const WithUrql = ({\n      pageProps,\n      urqlClient,\n      urqlState,\n      ...rest\n    }: WithUrqlProps) => {\n      const [version, forceUpdate] = useReducer(prev => prev + 1, 0);\n      const urqlServerState = (pageProps && pageProps.urqlState) || urqlState;\n\n      const client = useMemo(() => {\n        if (urqlClient && !version) {\n          return urqlClient;\n        }\n\n        if (!ssr || typeof window === 'undefined') {\n          // We want to force the cache to hydrate, we do this by setting the isClient flag to true\n          ssr = ssrExchange({\n            initialState: urqlServerState,\n            isClient: true,\n            staleWhileRevalidate:\n              typeof window !== 'undefined'\n                ? options!.staleWhileRevalidate\n                : undefined,\n          });\n        } else if (!version) {\n          ssr.restoreData(urqlServerState);\n        }\n\n        const clientConfig = getClientConfig(ssr);\n        if (!clientConfig.exchanges) {\n          // When the user does not provide exchanges we make the default assumption.\n          clientConfig.exchanges = [\n            dedupExchange,\n            cacheExchange,\n            ssr,\n            fetchExchange,\n          ];\n        }\n\n        return initUrqlClient(clientConfig, shouldEnableSuspense)!;\n      }, [urqlClient, urqlServerState, version]);\n\n      const resetUrqlClient = useCallback(() => {\n        resetClient();\n        ssr = ssrExchange({ initialState: undefined });\n        forceUpdate();\n      }, []);\n\n      return createElement(\n        Provider,\n        { value: client },\n        createElement(AppOrPage, {\n          ...rest,\n          pageProps,\n          urqlClient: client,\n          resetUrqlClient,\n        })\n      );\n    };\n\n    // Set the displayName to indicate use of withUrqlClient.\n    const displayName =\n      (AppOrPage as any).displayName || AppOrPage.name || 'Component';\n    WithUrql.displayName = `withUrqlClient(${displayName})`;\n\n    if ((AppOrPage as NextPageWithLayout).getLayout) {\n      WithUrql.getLayout = (AppOrPage as NextPageWithLayout).getLayout;\n    }\n\n    if (AppOrPage.getInitialProps || options!.ssr) {\n      WithUrql.getInitialProps = async (appOrPageCtx: NextUrqlContext) => {\n        const AppTree = appOrPageCtx.AppTree!;\n\n        // Determine if we are wrapping an App component or a Page component.\n        const isApp = !!(appOrPageCtx as AppContext).Component;\n        const ctx = isApp\n          ? (appOrPageCtx as AppContext).ctx\n          : (appOrPageCtx as NextPageContext);\n\n        const ssrCache = ssrExchange({ initialState: undefined });\n        const clientConfig = getClientConfig(ssrCache, ctx);\n        if (!clientConfig.exchanges) {\n          // When the user does not provide exchanges we make the default assumption.\n          clientConfig.exchanges = [\n            dedupExchange,\n            cacheExchange,\n            ssrCache,\n            fetchExchange,\n          ];\n        }\n\n        const urqlClient = initUrqlClient(clientConfig, !options!.neverSuspend);\n\n        if (urqlClient) {\n          (ctx as NextUrqlContext).urqlClient = urqlClient;\n        }\n\n        // Run the wrapped component's getInitialProps function.\n        let pageProps = {} as any;\n        if (AppOrPage.getInitialProps) {\n          pageProps = await AppOrPage.getInitialProps(appOrPageCtx as any);\n          if (ctx.res && (ctx.res.writableEnded || ctx.res.finished)) {\n            return { ...pageProps, urqlClient };\n          }\n        }\n\n        // Check the window object to determine whether or not we are on the server.\n        // getInitialProps runs on the server for initial render, and on the client for navigation.\n        // We only want to run the prepass step on the server.\n        if (typeof window !== 'undefined') {\n          return { ...pageProps, urqlClient };\n        }\n\n        const props = { ...pageProps, urqlClient };\n        const appTreeProps = isApp\n          ? { pageProps: {}, ...props }\n          : { pageProps: props };\n\n        // Run the prepass step on AppTree. This will run all urql queries on the server.\n        if (!options!.neverSuspend) {\n          await ssrPrepass(createElement(AppTree, appTreeProps));\n        }\n\n        return {\n          ...pageProps,\n          urqlState: ssrCache ? ssrCache.extractData() : undefined,\n          urqlClient,\n        };\n      };\n    }\n\n    return WithUrql;\n  };\n}\n"],"names":["urqlClient","initUrqlClient","clientOptions","canEnableSuspense","isServer","createClient","suspense","ssr","options","withUrqlClient","pageProps","rest","urqlServerState","urqlState","client","forceUpdate","useMemo","window","ssrExchange","initialState","staleWhileRevalidate","undefined","restoreData","clientConfig","exchanges","dedupExchange","cacheExchange","fetchExchange","version","useCallback","resetUrqlClient","resetClient","Provider","createElement","value","AppOrPage","displayName","name","WithUrql","getLayout","getInitialProps","async","AppTree","appOrPageCtx","isApp","Component","ssrCache","props","neverSuspend"],"mappings":";;;;;;;;;;AAEA,SAAAA;EAEAA;;;AAEA,SAAAC,eAAAC,GAAAC;;EASE,IAAAC;KACAA,IAAAC,EAAA;;MAEIC,UAAAH,MAAAC,KAAAF,EAAAI;;;;AASJ;;AACF,IAAAC;;;ECEA,KAAAC;IAAAA,IAAA,CAAA;;EAKA,OAAAC;QAIED;mCASER,eAAAU,iBAAAC;MAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,IAAAA,IAAAA;MAAA,IAAAC,IAAAF,KAAAA,EAAAG,aAAAA;MAME,IAAAC,IAAAC,GAAAA;;UAGAD,OAAAE;;QAEI,KAAAT,KAAA,sBAAAU;UAGFV,IAAAW,EAAA;;;YAGIC,sBAAA,sBAAAF,SAAAT,EAAAY,4BAAAC;;eAEAD,KAAAA;UAIDb,EAAAe,YAAAV;;QAEDL,QAAAK,EAAAL;QACD,KAAAgB,EAAAC;UAGDD,EAAAC,YAAA,EAAAC,GAAAC,GAAAnB,GAAAoB;;;UAQC,EAAA3B,GAAAY,GAAAgB;MAED,QAAAC;;QAGFC,IAAAA,EAAAD;UACEE,mBAAAV;;;;MAEAN,OAAAA,EAAAiB,GAAA;;SAGFC,EAAAA,GAAAD;WAAAE;QAAAD;QAIIjC,YAAAc;;;AAEAd;6CAINmC,EAAAC,eAAAD,EAAAE,QAAA;;MAKAC,SAAAF,YAAAD,EAAAI;;IAGED,MAAAC,mBAAAA;MACDD,SAAAE,kBAAAC;QAEDN,QAAAK;QAEI,IAAAE,MAAAC,EAAAD;;QAGA,IAAAE,IAAA1B,EAAA2B;;;;;UAOAtB,EAAAC,YAAA,EAAAC,GAAAC,GAAAoB,GAAAnB;;;QAQC,IAAA3B;;;QAMA,IAAAU,IAAA,CAAA;;;;;iBAMCA;cACEV;;;;;;eAOJU;YACEV;;;YAAA+C,IAAA;aACDrC;;;;;;;;;aAKCF,EAAAwC;;;;aAKDtC;;UAGCV;;AACAa;;WAGJyB;AAAA;AAGF;;SACFrC,gBAAAQ"}